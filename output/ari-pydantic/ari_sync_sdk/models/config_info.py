# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from ari_sync_sdk.models.set_id import SetId

class ConfigInfo(BaseModel):
    """
    Info about Asterisk configuration  # noqa: E501
    """
    default_language: StrictStr = Field(default=..., description="Default language for media playback.")
    max_channels: Optional[StrictInt] = Field(default=None, description="Maximum number of simultaneous channels.")
    max_load: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum load avg on system.")
    max_open_files: Optional[StrictInt] = Field(default=None, description="Maximum number of open file handles (files, sockets).")
    name: StrictStr = Field(default=..., description="Asterisk system name.")
    setid: SetId = Field(...)
    __properties = ["default_language", "max_channels", "max_load", "max_open_files", "name", "setid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConfigInfo:
        """Create an instance of ConfigInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of setid
        if self.setid:
            _dict['setid'] = self.setid.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConfigInfo:
        """Create an instance of ConfigInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConfigInfo.parse_obj(obj)

        _obj = ConfigInfo.parse_obj({
            "default_language": obj.get("default_language"),
            "max_channels": obj.get("max_channels"),
            "max_load": obj.get("max_load"),
            "max_open_files": obj.get("max_open_files"),
            "name": obj.get("name"),
            "setid": SetId.from_dict(obj.get("setid")) if obj.get("setid") is not None else None
        })
        return _obj


