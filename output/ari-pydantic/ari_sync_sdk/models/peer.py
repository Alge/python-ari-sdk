# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Peer(BaseModel):
    """
    Detailed information about a remote peer that communicates with Asterisk.  # noqa: E501
    """
    address: Optional[StrictStr] = Field(default=None, description="The IP address of the peer.")
    cause: Optional[StrictStr] = Field(default=None, description="An optional reason associated with the change in peer_status.")
    peer_status: StrictStr = Field(default=..., description="The current state of the peer. Note that the values of the status are dependent on the underlying peer technology.")
    port: Optional[StrictStr] = Field(default=None, description="The port of the peer.")
    time: Optional[StrictStr] = Field(default=None, description="The last known time the peer was contacted.")
    __properties = ["address", "cause", "peer_status", "port", "time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Peer:
        """Create an instance of Peer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Peer:
        """Create an instance of Peer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Peer.parse_obj(obj)

        _obj = Peer.parse_obj({
            "address": obj.get("address"),
            "cause": obj.get("cause"),
            "peer_status": obj.get("peer_status"),
            "port": obj.get("port"),
            "time": obj.get("time")
        })
        return _obj


