# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Application(BaseModel):
    """
    Details of a Stasis application
    """ # noqa: E501
    bridge_ids: List[StrictStr] = Field(description="Id's for bridges subscribed to.")
    channel_ids: List[StrictStr] = Field(description="Id's for channels subscribed to.")
    device_names: List[StrictStr] = Field(description="Names of the devices subscribed to.")
    endpoint_ids: List[StrictStr] = Field(description="{tech}/{resource} for endpoints subscribed to.")
    events_allowed: List[Dict[str, Any]] = Field(description="Event types sent to the application.")
    events_disallowed: List[Dict[str, Any]] = Field(description="Event types not sent to the application.")
    name: StrictStr = Field(description="Name of this application")
    __properties: ClassVar[List[str]] = ["bridge_ids", "channel_ids", "device_names", "endpoint_ids", "events_allowed", "events_disallowed", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bridge_ids": obj.get("bridge_ids"),
            "channel_ids": obj.get("channel_ids"),
            "device_names": obj.get("device_names"),
            "endpoint_ids": obj.get("endpoint_ids"),
            "events_allowed": obj.get("events_allowed"),
            "events_disallowed": obj.get("events_disallowed"),
            "name": obj.get("name")
        })
        return _obj


