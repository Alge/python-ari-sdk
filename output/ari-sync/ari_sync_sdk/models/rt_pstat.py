# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RTPstat(BaseModel):
    """
    A statistics of a RTP.
    """ # noqa: E501
    channel_uniqueid: StrictStr = Field(description="The Asterisk channel's unique ID that owns this instance.")
    local_maxjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum jitter on local side.")
    local_maxrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum number of packets lost on local side.")
    local_minjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum jitter on local side.")
    local_minrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum number of packets lost on local side.")
    local_normdevjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average jitter on local side.")
    local_normdevrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average number of packets lost on local side.")
    local_ssrc: StrictInt = Field(description="Our SSRC.")
    local_stdevjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard deviation jitter on local side.")
    local_stdevrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard deviation packets lost on local side.")
    maxrtt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum round trip time.")
    minrtt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum round trip time.")
    normdevrtt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average round trip time.")
    remote_maxjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum jitter on remote side.")
    remote_maxrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum number of packets lost on remote side.")
    remote_minjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum jitter on remote side.")
    remote_minrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum number of packets lost on remote side.")
    remote_normdevjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average jitter on remote side.")
    remote_normdevrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average number of packets lost on remote side.")
    remote_ssrc: StrictInt = Field(description="Their SSRC.")
    remote_stdevjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard deviation jitter on remote side.")
    remote_stdevrxploss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard deviation packets lost on remote side.")
    rtt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total round trip time.")
    rxcount: StrictInt = Field(description="Number of packets received.")
    rxjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Jitter on received packets.")
    rxoctetcount: StrictInt = Field(description="Number of octets received.")
    rxploss: StrictInt = Field(description="Number of received packets lost.")
    stdevrtt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Standard deviation round trip time.")
    txcount: StrictInt = Field(description="Number of packets transmitted.")
    txjitter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Jitter on transmitted packets.")
    txoctetcount: StrictInt = Field(description="Number of octets transmitted.")
    txploss: StrictInt = Field(description="Number of transmitted packets lost.")
    __properties: ClassVar[List[str]] = ["channel_uniqueid", "local_maxjitter", "local_maxrxploss", "local_minjitter", "local_minrxploss", "local_normdevjitter", "local_normdevrxploss", "local_ssrc", "local_stdevjitter", "local_stdevrxploss", "maxrtt", "minrtt", "normdevrtt", "remote_maxjitter", "remote_maxrxploss", "remote_minjitter", "remote_minrxploss", "remote_normdevjitter", "remote_normdevrxploss", "remote_ssrc", "remote_stdevjitter", "remote_stdevrxploss", "rtt", "rxcount", "rxjitter", "rxoctetcount", "rxploss", "stdevrtt", "txcount", "txjitter", "txoctetcount", "txploss"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RTPstat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RTPstat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel_uniqueid": obj.get("channel_uniqueid"),
            "local_maxjitter": obj.get("local_maxjitter"),
            "local_maxrxploss": obj.get("local_maxrxploss"),
            "local_minjitter": obj.get("local_minjitter"),
            "local_minrxploss": obj.get("local_minrxploss"),
            "local_normdevjitter": obj.get("local_normdevjitter"),
            "local_normdevrxploss": obj.get("local_normdevrxploss"),
            "local_ssrc": obj.get("local_ssrc"),
            "local_stdevjitter": obj.get("local_stdevjitter"),
            "local_stdevrxploss": obj.get("local_stdevrxploss"),
            "maxrtt": obj.get("maxrtt"),
            "minrtt": obj.get("minrtt"),
            "normdevrtt": obj.get("normdevrtt"),
            "remote_maxjitter": obj.get("remote_maxjitter"),
            "remote_maxrxploss": obj.get("remote_maxrxploss"),
            "remote_minjitter": obj.get("remote_minjitter"),
            "remote_minrxploss": obj.get("remote_minrxploss"),
            "remote_normdevjitter": obj.get("remote_normdevjitter"),
            "remote_normdevrxploss": obj.get("remote_normdevrxploss"),
            "remote_ssrc": obj.get("remote_ssrc"),
            "remote_stdevjitter": obj.get("remote_stdevjitter"),
            "remote_stdevrxploss": obj.get("remote_stdevrxploss"),
            "rtt": obj.get("rtt"),
            "rxcount": obj.get("rxcount"),
            "rxjitter": obj.get("rxjitter"),
            "rxoctetcount": obj.get("rxoctetcount"),
            "rxploss": obj.get("rxploss"),
            "stdevrtt": obj.get("stdevrtt"),
            "txcount": obj.get("txcount"),
            "txjitter": obj.get("txjitter"),
            "txoctetcount": obj.get("txoctetcount"),
            "txploss": obj.get("txploss")
        })
        return _obj


