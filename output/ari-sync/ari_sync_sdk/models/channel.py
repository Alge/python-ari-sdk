# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ari_sync_sdk.models.caller_id import CallerID
from ari_sync_sdk.models.dialplan_cep import DialplanCEP
from typing import Optional, Set
from typing_extensions import Self

class Channel(BaseModel):
    """
    A specific communication connection between Asterisk and an Endpoint.
    """ # noqa: E501
    accountcode: StrictStr
    caller: CallerID
    channelvars: Optional[Dict[str, Any]] = Field(default=None, description="Channel variables")
    connected: CallerID
    creationtime: date = Field(description="Timestamp when channel was created")
    dialplan: DialplanCEP
    id: StrictStr = Field(description="Unique identifier of the channel.  This is the same as the Uniqueid field in AMI.")
    language: StrictStr = Field(description="The default spoken language")
    name: StrictStr = Field(description="Name of the channel (i.e. SIP/foo-0000a7e3)")
    state: StrictStr
    __properties: ClassVar[List[str]] = ["accountcode", "caller", "channelvars", "connected", "creationtime", "dialplan", "id", "language", "name", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Channel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of caller
        if self.caller:
            _dict['caller'] = self.caller.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connected
        if self.connected:
            _dict['connected'] = self.connected.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dialplan
        if self.dialplan:
            _dict['dialplan'] = self.dialplan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Channel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountcode": obj.get("accountcode"),
            "caller": CallerID.from_dict(obj["caller"]) if obj.get("caller") is not None else None,
            "channelvars": obj.get("channelvars"),
            "connected": CallerID.from_dict(obj["connected"]) if obj.get("connected") is not None else None,
            "creationtime": obj.get("creationtime"),
            "dialplan": DialplanCEP.from_dict(obj["dialplan"]) if obj.get("dialplan") is not None else None,
            "id": obj.get("id"),
            "language": obj.get("language"),
            "name": obj.get("name"),
            "state": obj.get("state")
        })
        return _obj


