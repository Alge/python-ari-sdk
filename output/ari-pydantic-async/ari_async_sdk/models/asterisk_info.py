# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from ari_async_sdk.models.build_info import BuildInfo
from ari_async_sdk.models.config_info import ConfigInfo
from ari_async_sdk.models.status_info import StatusInfo
from ari_async_sdk.models.system_info import SystemInfo

class AsteriskInfo(BaseModel):
    """
    Asterisk system information  # noqa: E501
    """
    build: Optional[BuildInfo] = None
    config: Optional[ConfigInfo] = None
    status: Optional[StatusInfo] = None
    system: Optional[SystemInfo] = None
    __properties = ["build", "config", "status", "system"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AsteriskInfo:
        """Create an instance of AsteriskInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system
        if self.system:
            _dict['system'] = self.system.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AsteriskInfo:
        """Create an instance of AsteriskInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AsteriskInfo.parse_obj(obj)

        _obj = AsteriskInfo.parse_obj({
            "build": BuildInfo.from_dict(obj.get("build")) if obj.get("build") is not None else None,
            "config": ConfigInfo.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            "status": StatusInfo.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "system": SystemInfo.from_dict(obj.get("system")) if obj.get("system") is not None else None
        })
        return _obj


