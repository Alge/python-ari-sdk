# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Playback(BaseModel):
    """
    Object representing the playback of media to a channel  # noqa: E501
    """
    id: StrictStr = Field(default=..., description="ID for this playback operation")
    language: Optional[StrictStr] = Field(default=None, description="For media types that support multiple languages, the language requested for playback.")
    media_uri: StrictStr = Field(default=..., description="The URI for the media currently being played back.")
    next_media_uri: Optional[StrictStr] = Field(default=None, description="If a list of URIs is being played, the next media URI to be played back.")
    state: StrictStr = Field(default=..., description="Current state of the playback operation.")
    target_uri: StrictStr = Field(default=..., description="URI for the channel or bridge to play the media on")
    __properties = ["id", "language", "media_uri", "next_media_uri", "state", "target_uri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Playback:
        """Create an instance of Playback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Playback:
        """Create an instance of Playback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Playback.parse_obj(obj)

        _obj = Playback.parse_obj({
            "id": obj.get("id"),
            "language": obj.get("language"),
            "media_uri": obj.get("media_uri"),
            "next_media_uri": obj.get("next_media_uri"),
            "state": obj.get("state"),
            "target_uri": obj.get("target_uri")
        })
        return _obj


