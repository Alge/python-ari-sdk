# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import Field, StrictBool, StrictStr
from ari_async_sdk.models.bridge import Bridge
from ari_async_sdk.models.channel import Channel
from ari_async_sdk.models.event import Event

class BridgeAttendedTransfer(Event):
    """
    BridgeAttendedTransfer
    """
    destination_application: Optional[StrictStr] = Field(default=None, description="Application that has been transferred into")
    destination_bridge: Optional[StrictStr] = Field(default=None, description="Bridge that survived the merge result")
    destination_link_first_leg: Optional[Channel] = None
    destination_link_second_leg: Optional[Channel] = None
    destination_threeway_bridge: Optional[Bridge] = None
    destination_threeway_channel: Optional[Channel] = None
    destination_type: StrictStr = Field(default=..., description="How the transfer was accomplished")
    is_external: StrictBool = Field(default=..., description="Whether the transfer was externally initiated or not")
    replace_channel: Optional[Channel] = None
    result: StrictStr = Field(default=..., description="The result of the transfer attempt")
    transfer_target: Optional[Channel] = None
    transferee: Optional[Channel] = None
    transferer_first_leg: Channel = Field(...)
    transferer_first_leg_bridge: Optional[Bridge] = None
    transferer_second_leg: Channel = Field(...)
    transferer_second_leg_bridge: Optional[Bridge] = None
    __properties = ["application", "timestamp", "asterisk_id", "type", "destination_application", "destination_bridge", "destination_link_first_leg", "destination_link_second_leg", "destination_threeway_bridge", "destination_threeway_channel", "destination_type", "is_external", "replace_channel", "result", "transfer_target", "transferee", "transferer_first_leg", "transferer_first_leg_bridge", "transferer_second_leg", "transferer_second_leg_bridge"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BridgeAttendedTransfer:
        """Create an instance of BridgeAttendedTransfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of destination_link_first_leg
        if self.destination_link_first_leg:
            _dict['destination_link_first_leg'] = self.destination_link_first_leg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_link_second_leg
        if self.destination_link_second_leg:
            _dict['destination_link_second_leg'] = self.destination_link_second_leg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_threeway_bridge
        if self.destination_threeway_bridge:
            _dict['destination_threeway_bridge'] = self.destination_threeway_bridge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_threeway_channel
        if self.destination_threeway_channel:
            _dict['destination_threeway_channel'] = self.destination_threeway_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_channel
        if self.replace_channel:
            _dict['replace_channel'] = self.replace_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_target
        if self.transfer_target:
            _dict['transfer_target'] = self.transfer_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transferee
        if self.transferee:
            _dict['transferee'] = self.transferee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transferer_first_leg
        if self.transferer_first_leg:
            _dict['transferer_first_leg'] = self.transferer_first_leg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transferer_first_leg_bridge
        if self.transferer_first_leg_bridge:
            _dict['transferer_first_leg_bridge'] = self.transferer_first_leg_bridge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transferer_second_leg
        if self.transferer_second_leg:
            _dict['transferer_second_leg'] = self.transferer_second_leg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transferer_second_leg_bridge
        if self.transferer_second_leg_bridge:
            _dict['transferer_second_leg_bridge'] = self.transferer_second_leg_bridge.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BridgeAttendedTransfer:
        """Create an instance of BridgeAttendedTransfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BridgeAttendedTransfer.parse_obj(obj)

        _obj = BridgeAttendedTransfer.parse_obj({
            "application": obj.get("application"),
            "timestamp": obj.get("timestamp"),
            "asterisk_id": obj.get("asterisk_id"),
            "type": obj.get("type"),
            "destination_application": obj.get("destination_application"),
            "destination_bridge": obj.get("destination_bridge"),
            "destination_link_first_leg": Channel.from_dict(obj.get("destination_link_first_leg")) if obj.get("destination_link_first_leg") is not None else None,
            "destination_link_second_leg": Channel.from_dict(obj.get("destination_link_second_leg")) if obj.get("destination_link_second_leg") is not None else None,
            "destination_threeway_bridge": Bridge.from_dict(obj.get("destination_threeway_bridge")) if obj.get("destination_threeway_bridge") is not None else None,
            "destination_threeway_channel": Channel.from_dict(obj.get("destination_threeway_channel")) if obj.get("destination_threeway_channel") is not None else None,
            "destination_type": obj.get("destination_type"),
            "is_external": obj.get("is_external"),
            "replace_channel": Channel.from_dict(obj.get("replace_channel")) if obj.get("replace_channel") is not None else None,
            "result": obj.get("result"),
            "transfer_target": Channel.from_dict(obj.get("transfer_target")) if obj.get("transfer_target") is not None else None,
            "transferee": Channel.from_dict(obj.get("transferee")) if obj.get("transferee") is not None else None,
            "transferer_first_leg": Channel.from_dict(obj.get("transferer_first_leg")) if obj.get("transferer_first_leg") is not None else None,
            "transferer_first_leg_bridge": Bridge.from_dict(obj.get("transferer_first_leg_bridge")) if obj.get("transferer_first_leg_bridge") is not None else None,
            "transferer_second_leg": Channel.from_dict(obj.get("transferer_second_leg")) if obj.get("transferer_second_leg") is not None else None,
            "transferer_second_leg_bridge": Bridge.from_dict(obj.get("transferer_second_leg_bridge")) if obj.get("transferer_second_leg_bridge") is not None else None
        })
        return _obj


