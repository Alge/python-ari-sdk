# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Any, Dict, List, Optional

from ari_sync_sdk.models.endpoint import Endpoint

from ari_sync_sdk.api_client import ApiClient
from ari_sync_sdk.api_response import ApiResponse
from ari_sync_sdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EndpointsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def getendpoint(self, tech : Annotated[StrictStr, Field(..., description="Technology of the endpoint")], resource : Annotated[StrictStr, Field(..., description="ID of the endpoint")], **kwargs) -> Endpoint:  # noqa: E501
        """Details for an endpoint.  # noqa: E501


        :param tech: Technology of the endpoint (required)
        :type tech: str
        :param resource: ID of the endpoint (required)
        :type resource: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Endpoint
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the getendpoint_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.getendpoint_with_http_info(tech, resource, **kwargs)  # noqa: E501

    @validate_arguments
    async def getendpoint_with_http_info(self, tech : Annotated[StrictStr, Field(..., description="Technology of the endpoint")], resource : Annotated[StrictStr, Field(..., description="ID of the endpoint")], **kwargs) -> ApiResponse:  # noqa: E501
        """Details for an endpoint.  # noqa: E501


        :param tech: Technology of the endpoint (required)
        :type tech: str
        :param resource: ID of the endpoint (required)
        :type resource: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Endpoint, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tech',
            'resource'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getendpoint" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tech'] is not None:
            _path_params['tech'] = _params['tech']

        if _params['resource'] is not None:
            _path_params['resource'] = _params['resource']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Endpoint",
        }

        return await self.api_client.call_api(
            '/endpoints/{tech}/{resource}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def list_by_tech(self, tech : Annotated[StrictStr, Field(..., description="Technology of the endpoints (sip,iax2,...)")], **kwargs) -> List[Endpoint]:  # noqa: E501
        """List available endoints for a given endpoint technology.  # noqa: E501


        :param tech: Technology of the endpoints (sip,iax2,...) (required)
        :type tech: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Endpoint]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_by_tech_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.list_by_tech_with_http_info(tech, **kwargs)  # noqa: E501

    @validate_arguments
    async def list_by_tech_with_http_info(self, tech : Annotated[StrictStr, Field(..., description="Technology of the endpoints (sip,iax2,...)")], **kwargs) -> ApiResponse:  # noqa: E501
        """List available endoints for a given endpoint technology.  # noqa: E501


        :param tech: Technology of the endpoints (sip,iax2,...) (required)
        :type tech: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Endpoint], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tech'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_by_tech" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tech'] is not None:
            _path_params['tech'] = _params['tech']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[Endpoint]",
        }

        return await self.api_client.call_api(
            '/endpoints/{tech}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def listendpoints(self, **kwargs) -> List[Endpoint]:  # noqa: E501
        """List all endpoints.  # noqa: E501


        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Endpoint]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the listendpoints_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.listendpoints_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    async def listendpoints_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """List all endpoints.  # noqa: E501


        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Endpoint], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listendpoints" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[Endpoint]",
        }

        return await self.api_client.call_api(
            '/endpoints', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def send_message(self, to : Annotated[StrictStr, Field(..., description="The endpoint resource or technology specific URI to send the message to. Valid resources are sip, pjsip, and xmpp.")], var_from : Annotated[StrictStr, Field(..., description="The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp.")], body : Annotated[Optional[StrictStr], Field(description="The body of the message")] = None, variables : Optional[Dict[str, Any]] = None, **kwargs) -> None:  # noqa: E501
        """Send a message to some technology URI or endpoint.  # noqa: E501


        :param to: The endpoint resource or technology specific URI to send the message to. Valid resources are sip, pjsip, and xmpp. (required)
        :type to: str
        :param var_from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :type var_from: str
        :param body: The body of the message
        :type body: str
        :param variables:
        :type variables: object
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the send_message_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.send_message_with_http_info(to, var_from, body, variables, **kwargs)  # noqa: E501

    @validate_arguments
    async def send_message_with_http_info(self, to : Annotated[StrictStr, Field(..., description="The endpoint resource or technology specific URI to send the message to. Valid resources are sip, pjsip, and xmpp.")], var_from : Annotated[StrictStr, Field(..., description="The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp.")], body : Annotated[Optional[StrictStr], Field(description="The body of the message")] = None, variables : Optional[Dict[str, Any]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send a message to some technology URI or endpoint.  # noqa: E501


        :param to: The endpoint resource or technology specific URI to send the message to. Valid resources are sip, pjsip, and xmpp. (required)
        :type to: str
        :param var_from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :type var_from: str
        :param body: The body of the message
        :type body: str
        :param variables:
        :type variables: object
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'to',
            'var_from',
            'body',
            'variables'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_message" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('to') is not None:  # noqa: E501
            _query_params.append(('to', _params['to']))

        if _params.get('var_from') is not None:  # noqa: E501
            _query_params.append(('from', _params['var_from']))

        if _params.get('body') is not None:  # noqa: E501
            _query_params.append(('body', _params['body']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['variables'] is not None:
            _body_params = _params['variables']

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/endpoints/sendMessage', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def send_message_to_endpoint(self, tech : Annotated[StrictStr, Field(..., description="Technology of the endpoint")], resource : Annotated[StrictStr, Field(..., description="ID of the endpoint")], var_from : Annotated[StrictStr, Field(..., description="The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp.")], body : Annotated[Optional[StrictStr], Field(description="The body of the message")] = None, variables : Optional[Dict[str, Any]] = None, **kwargs) -> None:  # noqa: E501
        """Send a message to some endpoint in a technology.  # noqa: E501


        :param tech: Technology of the endpoint (required)
        :type tech: str
        :param resource: ID of the endpoint (required)
        :type resource: str
        :param var_from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :type var_from: str
        :param body: The body of the message
        :type body: str
        :param variables:
        :type variables: object
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the send_message_to_endpoint_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.send_message_to_endpoint_with_http_info(tech, resource, var_from, body, variables, **kwargs)  # noqa: E501

    @validate_arguments
    async def send_message_to_endpoint_with_http_info(self, tech : Annotated[StrictStr, Field(..., description="Technology of the endpoint")], resource : Annotated[StrictStr, Field(..., description="ID of the endpoint")], var_from : Annotated[StrictStr, Field(..., description="The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp.")], body : Annotated[Optional[StrictStr], Field(description="The body of the message")] = None, variables : Optional[Dict[str, Any]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Send a message to some endpoint in a technology.  # noqa: E501


        :param tech: Technology of the endpoint (required)
        :type tech: str
        :param resource: ID of the endpoint (required)
        :type resource: str
        :param var_from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :type var_from: str
        :param body: The body of the message
        :type body: str
        :param variables:
        :type variables: object
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'tech',
            'resource',
            'var_from',
            'body',
            'variables'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_message_to_endpoint" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tech'] is not None:
            _path_params['tech'] = _params['tech']

        if _params['resource'] is not None:
            _path_params['resource'] = _params['resource']


        # process the query parameters
        _query_params = []
        if _params.get('var_from') is not None:  # noqa: E501
            _query_params.append(('from', _params['var_from']))

        if _params.get('body') is not None:  # noqa: E501
            _query_params.append(('body', _params['body']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['variables'] is not None:
            _body_params = _params['variables']

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/endpoints/{tech}/{resource}/sendMessage', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
