# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class LiveRecording(BaseModel):
    """
    A recording that is in progress  # noqa: E501
    """
    cause: Optional[StrictStr] = Field(default=None, description="Cause for recording failure if failed")
    duration: Optional[StrictInt] = Field(default=None, description="Duration in seconds of the recording")
    format: StrictStr = Field(default=..., description="Recording format (wav, gsm, etc.)")
    name: StrictStr = Field(default=..., description="Base name for the recording")
    silence_duration: Optional[StrictInt] = Field(default=None, description="Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.")
    state: StrictStr = Field(...)
    talking_duration: Optional[StrictInt] = Field(default=None, description="Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.")
    target_uri: StrictStr = Field(default=..., description="URI for the channel or bridge being recorded")
    __properties = ["cause", "duration", "format", "name", "silence_duration", "state", "talking_duration", "target_uri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LiveRecording:
        """Create an instance of LiveRecording from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LiveRecording:
        """Create an instance of LiveRecording from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LiveRecording.parse_obj(obj)

        _obj = LiveRecording.parse_obj({
            "cause": obj.get("cause"),
            "duration": obj.get("duration"),
            "format": obj.get("format"),
            "name": obj.get("name"),
            "silence_duration": obj.get("silence_duration"),
            "state": obj.get("state"),
            "talking_duration": obj.get("talking_duration"),
            "target_uri": obj.get("target_uri")
        })
        return _obj


