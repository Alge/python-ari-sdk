# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class TextMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, _from: str=None, to: str=None, variables: object=None):
        """TextMessage - a model defined in OpenAPI

        :param body: The body of this TextMessage.
        :param _from: The _from of this TextMessage.
        :param to: The to of this TextMessage.
        :param variables: The variables of this TextMessage.
        """
        self.openapi_types = {
            'body': str,
            '_from': str,
            'to': str,
            'variables': object
        }

        self.attribute_map = {
            'body': 'body',
            '_from': 'from',
            'to': 'to',
            'variables': 'variables'
        }

        self._body = body
        self.__from = _from
        self._to = to
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextMessage of this TextMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this TextMessage.

        The text of the message.

        :return: The body of this TextMessage.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TextMessage.

        The text of the message.

        :param body: The body of this TextMessage.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def _from(self):
        """Gets the _from of this TextMessage.

        A technology specific URI specifying the source of the message. For sip and pjsip technologies, any SIP URI can be specified. For xmpp, the URI must correspond to the client connection being used to send the message.

        :return: The _from of this TextMessage.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this TextMessage.

        A technology specific URI specifying the source of the message. For sip and pjsip technologies, any SIP URI can be specified. For xmpp, the URI must correspond to the client connection being used to send the message.

        :param _from: The _from of this TextMessage.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this TextMessage.

        A technology specific URI specifying the destination of the message. Valid technologies include sip, pjsip, and xmp. The destination of a message should be an endpoint.

        :return: The to of this TextMessage.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this TextMessage.

        A technology specific URI specifying the destination of the message. Valid technologies include sip, pjsip, and xmp. The destination of a message should be an endpoint.

        :param to: The to of this TextMessage.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def variables(self):
        """Gets the variables of this TextMessage.

        Technology specific key/value pairs (JSON object) associated with the message.

        :return: The variables of this TextMessage.
        :rtype: object
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this TextMessage.

        Technology specific key/value pairs (JSON object) associated with the message.

        :param variables: The variables of this TextMessage.
        :type variables: object
        """

        self._variables = variables
