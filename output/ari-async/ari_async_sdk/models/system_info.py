# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class SystemInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, version: str=None):
        """SystemInfo - a model defined in OpenAPI

        :param entity_id: The entity_id of this SystemInfo.
        :param version: The version of this SystemInfo.
        """
        self.openapi_types = {
            'entity_id': str,
            'version': str
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'version': 'version'
        }

        self._entity_id = entity_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemInfo of this SystemInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this SystemInfo.


        :return: The entity_id of this SystemInfo.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SystemInfo.


        :param entity_id: The entity_id of this SystemInfo.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def version(self):
        """Gets the version of this SystemInfo.

        Asterisk version.

        :return: The version of this SystemInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInfo.

        Asterisk version.

        :param version: The version of this SystemInfo.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
