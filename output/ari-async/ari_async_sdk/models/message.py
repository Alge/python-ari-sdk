# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asterisk_id: str=None, type: str=None):
        """Message - a model defined in OpenAPI

        :param asterisk_id: The asterisk_id of this Message.
        :param type: The type of this Message.
        """
        self.openapi_types = {
            'asterisk_id': str,
            'type': str
        }

        self.attribute_map = {
            'asterisk_id': 'asterisk_id',
            'type': 'type'
        }

        self._asterisk_id = asterisk_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asterisk_id(self):
        """Gets the asterisk_id of this Message.

        The unique ID for the Asterisk instance that raised this event.

        :return: The asterisk_id of this Message.
        :rtype: str
        """
        return self._asterisk_id

    @asterisk_id.setter
    def asterisk_id(self, asterisk_id):
        """Sets the asterisk_id of this Message.

        The unique ID for the Asterisk instance that raised this event.

        :param asterisk_id: The asterisk_id of this Message.
        :type asterisk_id: str
        """

        self._asterisk_id = asterisk_id

    @property
    def type(self):
        """Gets the type of this Message.

        Indicates the type of this message.

        :return: The type of this Message.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Message.

        Indicates the type of this message.

        :param type: The type of this Message.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
