# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class BuildInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, kernel: str=None, machine: str=None, options: str=None, os: str=None, user: str=None):
        """BuildInfo - a model defined in OpenAPI

        :param _date: The _date of this BuildInfo.
        :param kernel: The kernel of this BuildInfo.
        :param machine: The machine of this BuildInfo.
        :param options: The options of this BuildInfo.
        :param os: The os of this BuildInfo.
        :param user: The user of this BuildInfo.
        """
        self.openapi_types = {
            '_date': str,
            'kernel': str,
            'machine': str,
            'options': str,
            'os': str,
            'user': str
        }

        self.attribute_map = {
            '_date': 'date',
            'kernel': 'kernel',
            'machine': 'machine',
            'options': 'options',
            'os': 'os',
            'user': 'user'
        }

        self.__date = _date
        self._kernel = kernel
        self._machine = machine
        self._options = options
        self._os = os
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildInfo of this BuildInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this BuildInfo.

        Date and time when Asterisk was built.

        :return: The _date of this BuildInfo.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BuildInfo.

        Date and time when Asterisk was built.

        :param _date: The _date of this BuildInfo.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def kernel(self):
        """Gets the kernel of this BuildInfo.

        Kernel version Asterisk was built on.

        :return: The kernel of this BuildInfo.
        :rtype: str
        """
        return self._kernel

    @kernel.setter
    def kernel(self, kernel):
        """Sets the kernel of this BuildInfo.

        Kernel version Asterisk was built on.

        :param kernel: The kernel of this BuildInfo.
        :type kernel: str
        """
        if kernel is None:
            raise ValueError("Invalid value for `kernel`, must not be `None`")

        self._kernel = kernel

    @property
    def machine(self):
        """Gets the machine of this BuildInfo.

        Machine architecture (x86_64, i686, ppc, etc.)

        :return: The machine of this BuildInfo.
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this BuildInfo.

        Machine architecture (x86_64, i686, ppc, etc.)

        :param machine: The machine of this BuildInfo.
        :type machine: str
        """
        if machine is None:
            raise ValueError("Invalid value for `machine`, must not be `None`")

        self._machine = machine

    @property
    def options(self):
        """Gets the options of this BuildInfo.

        Compile time options, or empty string if default.

        :return: The options of this BuildInfo.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this BuildInfo.

        Compile time options, or empty string if default.

        :param options: The options of this BuildInfo.
        :type options: str
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def os(self):
        """Gets the os of this BuildInfo.

        OS Asterisk was built on.

        :return: The os of this BuildInfo.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this BuildInfo.

        OS Asterisk was built on.

        :param os: The os of this BuildInfo.
        :type os: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def user(self):
        """Gets the user of this BuildInfo.

        Username that build Asterisk

        :return: The user of this BuildInfo.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BuildInfo.

        Username that build Asterisk

        :param user: The user of this BuildInfo.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
