# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Peer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, cause: str=None, peer_status: str=None, port: str=None, time: str=None):
        """Peer - a model defined in OpenAPI

        :param address: The address of this Peer.
        :param cause: The cause of this Peer.
        :param peer_status: The peer_status of this Peer.
        :param port: The port of this Peer.
        :param time: The time of this Peer.
        """
        self.openapi_types = {
            'address': str,
            'cause': str,
            'peer_status': str,
            'port': str,
            'time': str
        }

        self.attribute_map = {
            'address': 'address',
            'cause': 'cause',
            'peer_status': 'peer_status',
            'port': 'port',
            'time': 'time'
        }

        self._address = address
        self._cause = cause
        self._peer_status = peer_status
        self._port = port
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Peer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Peer of this Peer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Peer.

        The IP address of the peer.

        :return: The address of this Peer.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Peer.

        The IP address of the peer.

        :param address: The address of this Peer.
        :type address: str
        """

        self._address = address

    @property
    def cause(self):
        """Gets the cause of this Peer.

        An optional reason associated with the change in peer_status.

        :return: The cause of this Peer.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this Peer.

        An optional reason associated with the change in peer_status.

        :param cause: The cause of this Peer.
        :type cause: str
        """

        self._cause = cause

    @property
    def peer_status(self):
        """Gets the peer_status of this Peer.

        The current state of the peer. Note that the values of the status are dependent on the underlying peer technology.

        :return: The peer_status of this Peer.
        :rtype: str
        """
        return self._peer_status

    @peer_status.setter
    def peer_status(self, peer_status):
        """Sets the peer_status of this Peer.

        The current state of the peer. Note that the values of the status are dependent on the underlying peer technology.

        :param peer_status: The peer_status of this Peer.
        :type peer_status: str
        """
        if peer_status is None:
            raise ValueError("Invalid value for `peer_status`, must not be `None`")

        self._peer_status = peer_status

    @property
    def port(self):
        """Gets the port of this Peer.

        The port of the peer.

        :return: The port of this Peer.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Peer.

        The port of the peer.

        :param port: The port of this Peer.
        :type port: str
        """

        self._port = port

    @property
    def time(self):
        """Gets the time of this Peer.

        The last known time the peer was contacted.

        :return: The time of this Peer.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Peer.

        The last known time the peer was contacted.

        :param time: The time of this Peer.
        :type time: str
        """

        self._time = time
