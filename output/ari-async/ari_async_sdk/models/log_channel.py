# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class LogChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, configuration: str=None, status: str=None, type: str=None):
        """LogChannel - a model defined in OpenAPI

        :param channel: The channel of this LogChannel.
        :param configuration: The configuration of this LogChannel.
        :param status: The status of this LogChannel.
        :param type: The type of this LogChannel.
        """
        self.openapi_types = {
            'channel': str,
            'configuration': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'configuration': 'configuration',
            'status': 'status',
            'type': 'type'
        }

        self._channel = channel
        self._configuration = configuration
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogChannel of this LogChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this LogChannel.

        The log channel path

        :return: The channel of this LogChannel.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this LogChannel.

        The log channel path

        :param channel: The channel of this LogChannel.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def configuration(self):
        """Gets the configuration of this LogChannel.

        The various log levels

        :return: The configuration of this LogChannel.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this LogChannel.

        The various log levels

        :param configuration: The configuration of this LogChannel.
        :type configuration: str
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def status(self):
        """Gets the status of this LogChannel.

        Whether or not a log type is enabled

        :return: The status of this LogChannel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LogChannel.

        Whether or not a log type is enabled

        :param status: The status of this LogChannel.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this LogChannel.

        Types of logs for the log channel

        :return: The type of this LogChannel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LogChannel.

        Types of logs for the log channel

        :param type: The type of this LogChannel.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
