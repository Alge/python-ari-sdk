# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class SetId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, user: str=None):
        """SetId - a model defined in OpenAPI

        :param group: The group of this SetId.
        :param user: The user of this SetId.
        """
        self.openapi_types = {
            'group': str,
            'user': str
        }

        self.attribute_map = {
            'group': 'group',
            'user': 'user'
        }

        self._group = group
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetId of this SetId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this SetId.

        Effective group id.

        :return: The group of this SetId.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SetId.

        Effective group id.

        :param group: The group of this SetId.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def user(self):
        """Gets the user of this SetId.

        Effective user id.

        :return: The user of this SetId.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SetId.

        Effective user id.

        :param user: The user of this SetId.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
