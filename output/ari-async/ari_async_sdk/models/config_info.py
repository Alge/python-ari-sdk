# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk.models.set_id import SetId
from ari_async_sdk import util


class ConfigInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_language: str=None, max_channels: int=None, max_load: float=None, max_open_files: int=None, name: str=None, setid: SetId=None):
        """ConfigInfo - a model defined in OpenAPI

        :param default_language: The default_language of this ConfigInfo.
        :param max_channels: The max_channels of this ConfigInfo.
        :param max_load: The max_load of this ConfigInfo.
        :param max_open_files: The max_open_files of this ConfigInfo.
        :param name: The name of this ConfigInfo.
        :param setid: The setid of this ConfigInfo.
        """
        self.openapi_types = {
            'default_language': str,
            'max_channels': int,
            'max_load': float,
            'max_open_files': int,
            'name': str,
            'setid': SetId
        }

        self.attribute_map = {
            'default_language': 'default_language',
            'max_channels': 'max_channels',
            'max_load': 'max_load',
            'max_open_files': 'max_open_files',
            'name': 'name',
            'setid': 'setid'
        }

        self._default_language = default_language
        self._max_channels = max_channels
        self._max_load = max_load
        self._max_open_files = max_open_files
        self._name = name
        self._setid = setid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigInfo of this ConfigInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_language(self):
        """Gets the default_language of this ConfigInfo.

        Default language for media playback.

        :return: The default_language of this ConfigInfo.
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this ConfigInfo.

        Default language for media playback.

        :param default_language: The default_language of this ConfigInfo.
        :type default_language: str
        """
        if default_language is None:
            raise ValueError("Invalid value for `default_language`, must not be `None`")

        self._default_language = default_language

    @property
    def max_channels(self):
        """Gets the max_channels of this ConfigInfo.

        Maximum number of simultaneous channels.

        :return: The max_channels of this ConfigInfo.
        :rtype: int
        """
        return self._max_channels

    @max_channels.setter
    def max_channels(self, max_channels):
        """Sets the max_channels of this ConfigInfo.

        Maximum number of simultaneous channels.

        :param max_channels: The max_channels of this ConfigInfo.
        :type max_channels: int
        """

        self._max_channels = max_channels

    @property
    def max_load(self):
        """Gets the max_load of this ConfigInfo.

        Maximum load avg on system.

        :return: The max_load of this ConfigInfo.
        :rtype: float
        """
        return self._max_load

    @max_load.setter
    def max_load(self, max_load):
        """Sets the max_load of this ConfigInfo.

        Maximum load avg on system.

        :param max_load: The max_load of this ConfigInfo.
        :type max_load: float
        """

        self._max_load = max_load

    @property
    def max_open_files(self):
        """Gets the max_open_files of this ConfigInfo.

        Maximum number of open file handles (files, sockets).

        :return: The max_open_files of this ConfigInfo.
        :rtype: int
        """
        return self._max_open_files

    @max_open_files.setter
    def max_open_files(self, max_open_files):
        """Sets the max_open_files of this ConfigInfo.

        Maximum number of open file handles (files, sockets).

        :param max_open_files: The max_open_files of this ConfigInfo.
        :type max_open_files: int
        """

        self._max_open_files = max_open_files

    @property
    def name(self):
        """Gets the name of this ConfigInfo.

        Asterisk system name.

        :return: The name of this ConfigInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigInfo.

        Asterisk system name.

        :param name: The name of this ConfigInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def setid(self):
        """Gets the setid of this ConfigInfo.


        :return: The setid of this ConfigInfo.
        :rtype: SetId
        """
        return self._setid

    @setid.setter
    def setid(self, setid):
        """Sets the setid of this ConfigInfo.


        :param setid: The setid of this ConfigInfo.
        :type setid: SetId
        """
        if setid is None:
            raise ValueError("Invalid value for `setid`, must not be `None`")

        self._setid = setid
