# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class ContactInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aor: str=None, contact_status: str=None, roundtrip_usec: str=None, uri: str=None):
        """ContactInfo - a model defined in OpenAPI

        :param aor: The aor of this ContactInfo.
        :param contact_status: The contact_status of this ContactInfo.
        :param roundtrip_usec: The roundtrip_usec of this ContactInfo.
        :param uri: The uri of this ContactInfo.
        """
        self.openapi_types = {
            'aor': str,
            'contact_status': str,
            'roundtrip_usec': str,
            'uri': str
        }

        self.attribute_map = {
            'aor': 'aor',
            'contact_status': 'contact_status',
            'roundtrip_usec': 'roundtrip_usec',
            'uri': 'uri'
        }

        self._aor = aor
        self._contact_status = contact_status
        self._roundtrip_usec = roundtrip_usec
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactInfo of this ContactInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aor(self):
        """Gets the aor of this ContactInfo.

        The Address of Record this contact belongs to.

        :return: The aor of this ContactInfo.
        :rtype: str
        """
        return self._aor

    @aor.setter
    def aor(self, aor):
        """Sets the aor of this ContactInfo.

        The Address of Record this contact belongs to.

        :param aor: The aor of this ContactInfo.
        :type aor: str
        """
        if aor is None:
            raise ValueError("Invalid value for `aor`, must not be `None`")

        self._aor = aor

    @property
    def contact_status(self):
        """Gets the contact_status of this ContactInfo.

        The current status of the contact.

        :return: The contact_status of this ContactInfo.
        :rtype: str
        """
        return self._contact_status

    @contact_status.setter
    def contact_status(self, contact_status):
        """Sets the contact_status of this ContactInfo.

        The current status of the contact.

        :param contact_status: The contact_status of this ContactInfo.
        :type contact_status: str
        """
        if contact_status is None:
            raise ValueError("Invalid value for `contact_status`, must not be `None`")

        self._contact_status = contact_status

    @property
    def roundtrip_usec(self):
        """Gets the roundtrip_usec of this ContactInfo.

        Current round trip time, in microseconds, for the contact.

        :return: The roundtrip_usec of this ContactInfo.
        :rtype: str
        """
        return self._roundtrip_usec

    @roundtrip_usec.setter
    def roundtrip_usec(self, roundtrip_usec):
        """Sets the roundtrip_usec of this ContactInfo.

        Current round trip time, in microseconds, for the contact.

        :param roundtrip_usec: The roundtrip_usec of this ContactInfo.
        :type roundtrip_usec: str
        """

        self._roundtrip_usec = roundtrip_usec

    @property
    def uri(self):
        """Gets the uri of this ContactInfo.

        The location of the contact.

        :return: The uri of this ContactInfo.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ContactInfo.

        The location of the contact.

        :param uri: The uri of this ContactInfo.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
