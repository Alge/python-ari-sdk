# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class LiveRecording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cause: str=None, duration: int=None, format: str=None, name: str=None, silence_duration: int=None, state: str=None, talking_duration: int=None, target_uri: str=None):
        """LiveRecording - a model defined in OpenAPI

        :param cause: The cause of this LiveRecording.
        :param duration: The duration of this LiveRecording.
        :param format: The format of this LiveRecording.
        :param name: The name of this LiveRecording.
        :param silence_duration: The silence_duration of this LiveRecording.
        :param state: The state of this LiveRecording.
        :param talking_duration: The talking_duration of this LiveRecording.
        :param target_uri: The target_uri of this LiveRecording.
        """
        self.openapi_types = {
            'cause': str,
            'duration': int,
            'format': str,
            'name': str,
            'silence_duration': int,
            'state': str,
            'talking_duration': int,
            'target_uri': str
        }

        self.attribute_map = {
            'cause': 'cause',
            'duration': 'duration',
            'format': 'format',
            'name': 'name',
            'silence_duration': 'silence_duration',
            'state': 'state',
            'talking_duration': 'talking_duration',
            'target_uri': 'target_uri'
        }

        self._cause = cause
        self._duration = duration
        self._format = format
        self._name = name
        self._silence_duration = silence_duration
        self._state = state
        self._talking_duration = talking_duration
        self._target_uri = target_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveRecording':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveRecording of this LiveRecording.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cause(self):
        """Gets the cause of this LiveRecording.

        Cause for recording failure if failed

        :return: The cause of this LiveRecording.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this LiveRecording.

        Cause for recording failure if failed

        :param cause: The cause of this LiveRecording.
        :type cause: str
        """

        self._cause = cause

    @property
    def duration(self):
        """Gets the duration of this LiveRecording.

        Duration in seconds of the recording

        :return: The duration of this LiveRecording.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this LiveRecording.

        Duration in seconds of the recording

        :param duration: The duration of this LiveRecording.
        :type duration: int
        """

        self._duration = duration

    @property
    def format(self):
        """Gets the format of this LiveRecording.

        Recording format (wav, gsm, etc.)

        :return: The format of this LiveRecording.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this LiveRecording.

        Recording format (wav, gsm, etc.)

        :param format: The format of this LiveRecording.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def name(self):
        """Gets the name of this LiveRecording.

        Base name for the recording

        :return: The name of this LiveRecording.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiveRecording.

        Base name for the recording

        :param name: The name of this LiveRecording.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def silence_duration(self):
        """Gets the silence_duration of this LiveRecording.

        Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.

        :return: The silence_duration of this LiveRecording.
        :rtype: int
        """
        return self._silence_duration

    @silence_duration.setter
    def silence_duration(self, silence_duration):
        """Sets the silence_duration of this LiveRecording.

        Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.

        :param silence_duration: The silence_duration of this LiveRecording.
        :type silence_duration: int
        """

        self._silence_duration = silence_duration

    @property
    def state(self):
        """Gets the state of this LiveRecording.


        :return: The state of this LiveRecording.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LiveRecording.


        :param state: The state of this LiveRecording.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def talking_duration(self):
        """Gets the talking_duration of this LiveRecording.

        Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.

        :return: The talking_duration of this LiveRecording.
        :rtype: int
        """
        return self._talking_duration

    @talking_duration.setter
    def talking_duration(self, talking_duration):
        """Sets the talking_duration of this LiveRecording.

        Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.

        :param talking_duration: The talking_duration of this LiveRecording.
        :type talking_duration: int
        """

        self._talking_duration = talking_duration

    @property
    def target_uri(self):
        """Gets the target_uri of this LiveRecording.

        URI for the channel or bridge being recorded

        :return: The target_uri of this LiveRecording.
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this LiveRecording.

        URI for the channel or bridge being recorded

        :param target_uri: The target_uri of this LiveRecording.
        :type target_uri: str
        """
        if target_uri is None:
            raise ValueError("Invalid value for `target_uri`, must not be `None`")

        self._target_uri = target_uri
