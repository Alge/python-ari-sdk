# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class RTPstat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_uniqueid: str=None, local_maxjitter: float=None, local_maxrxploss: float=None, local_minjitter: float=None, local_minrxploss: float=None, local_normdevjitter: float=None, local_normdevrxploss: float=None, local_ssrc: int=None, local_stdevjitter: float=None, local_stdevrxploss: float=None, maxrtt: float=None, minrtt: float=None, normdevrtt: float=None, remote_maxjitter: float=None, remote_maxrxploss: float=None, remote_minjitter: float=None, remote_minrxploss: float=None, remote_normdevjitter: float=None, remote_normdevrxploss: float=None, remote_ssrc: int=None, remote_stdevjitter: float=None, remote_stdevrxploss: float=None, rtt: float=None, rxcount: int=None, rxjitter: float=None, rxoctetcount: int=None, rxploss: int=None, stdevrtt: float=None, txcount: int=None, txjitter: float=None, txoctetcount: int=None, txploss: int=None):
        """RTPstat - a model defined in OpenAPI

        :param channel_uniqueid: The channel_uniqueid of this RTPstat.
        :param local_maxjitter: The local_maxjitter of this RTPstat.
        :param local_maxrxploss: The local_maxrxploss of this RTPstat.
        :param local_minjitter: The local_minjitter of this RTPstat.
        :param local_minrxploss: The local_minrxploss of this RTPstat.
        :param local_normdevjitter: The local_normdevjitter of this RTPstat.
        :param local_normdevrxploss: The local_normdevrxploss of this RTPstat.
        :param local_ssrc: The local_ssrc of this RTPstat.
        :param local_stdevjitter: The local_stdevjitter of this RTPstat.
        :param local_stdevrxploss: The local_stdevrxploss of this RTPstat.
        :param maxrtt: The maxrtt of this RTPstat.
        :param minrtt: The minrtt of this RTPstat.
        :param normdevrtt: The normdevrtt of this RTPstat.
        :param remote_maxjitter: The remote_maxjitter of this RTPstat.
        :param remote_maxrxploss: The remote_maxrxploss of this RTPstat.
        :param remote_minjitter: The remote_minjitter of this RTPstat.
        :param remote_minrxploss: The remote_minrxploss of this RTPstat.
        :param remote_normdevjitter: The remote_normdevjitter of this RTPstat.
        :param remote_normdevrxploss: The remote_normdevrxploss of this RTPstat.
        :param remote_ssrc: The remote_ssrc of this RTPstat.
        :param remote_stdevjitter: The remote_stdevjitter of this RTPstat.
        :param remote_stdevrxploss: The remote_stdevrxploss of this RTPstat.
        :param rtt: The rtt of this RTPstat.
        :param rxcount: The rxcount of this RTPstat.
        :param rxjitter: The rxjitter of this RTPstat.
        :param rxoctetcount: The rxoctetcount of this RTPstat.
        :param rxploss: The rxploss of this RTPstat.
        :param stdevrtt: The stdevrtt of this RTPstat.
        :param txcount: The txcount of this RTPstat.
        :param txjitter: The txjitter of this RTPstat.
        :param txoctetcount: The txoctetcount of this RTPstat.
        :param txploss: The txploss of this RTPstat.
        """
        self.openapi_types = {
            'channel_uniqueid': str,
            'local_maxjitter': float,
            'local_maxrxploss': float,
            'local_minjitter': float,
            'local_minrxploss': float,
            'local_normdevjitter': float,
            'local_normdevrxploss': float,
            'local_ssrc': int,
            'local_stdevjitter': float,
            'local_stdevrxploss': float,
            'maxrtt': float,
            'minrtt': float,
            'normdevrtt': float,
            'remote_maxjitter': float,
            'remote_maxrxploss': float,
            'remote_minjitter': float,
            'remote_minrxploss': float,
            'remote_normdevjitter': float,
            'remote_normdevrxploss': float,
            'remote_ssrc': int,
            'remote_stdevjitter': float,
            'remote_stdevrxploss': float,
            'rtt': float,
            'rxcount': int,
            'rxjitter': float,
            'rxoctetcount': int,
            'rxploss': int,
            'stdevrtt': float,
            'txcount': int,
            'txjitter': float,
            'txoctetcount': int,
            'txploss': int
        }

        self.attribute_map = {
            'channel_uniqueid': 'channel_uniqueid',
            'local_maxjitter': 'local_maxjitter',
            'local_maxrxploss': 'local_maxrxploss',
            'local_minjitter': 'local_minjitter',
            'local_minrxploss': 'local_minrxploss',
            'local_normdevjitter': 'local_normdevjitter',
            'local_normdevrxploss': 'local_normdevrxploss',
            'local_ssrc': 'local_ssrc',
            'local_stdevjitter': 'local_stdevjitter',
            'local_stdevrxploss': 'local_stdevrxploss',
            'maxrtt': 'maxrtt',
            'minrtt': 'minrtt',
            'normdevrtt': 'normdevrtt',
            'remote_maxjitter': 'remote_maxjitter',
            'remote_maxrxploss': 'remote_maxrxploss',
            'remote_minjitter': 'remote_minjitter',
            'remote_minrxploss': 'remote_minrxploss',
            'remote_normdevjitter': 'remote_normdevjitter',
            'remote_normdevrxploss': 'remote_normdevrxploss',
            'remote_ssrc': 'remote_ssrc',
            'remote_stdevjitter': 'remote_stdevjitter',
            'remote_stdevrxploss': 'remote_stdevrxploss',
            'rtt': 'rtt',
            'rxcount': 'rxcount',
            'rxjitter': 'rxjitter',
            'rxoctetcount': 'rxoctetcount',
            'rxploss': 'rxploss',
            'stdevrtt': 'stdevrtt',
            'txcount': 'txcount',
            'txjitter': 'txjitter',
            'txoctetcount': 'txoctetcount',
            'txploss': 'txploss'
        }

        self._channel_uniqueid = channel_uniqueid
        self._local_maxjitter = local_maxjitter
        self._local_maxrxploss = local_maxrxploss
        self._local_minjitter = local_minjitter
        self._local_minrxploss = local_minrxploss
        self._local_normdevjitter = local_normdevjitter
        self._local_normdevrxploss = local_normdevrxploss
        self._local_ssrc = local_ssrc
        self._local_stdevjitter = local_stdevjitter
        self._local_stdevrxploss = local_stdevrxploss
        self._maxrtt = maxrtt
        self._minrtt = minrtt
        self._normdevrtt = normdevrtt
        self._remote_maxjitter = remote_maxjitter
        self._remote_maxrxploss = remote_maxrxploss
        self._remote_minjitter = remote_minjitter
        self._remote_minrxploss = remote_minrxploss
        self._remote_normdevjitter = remote_normdevjitter
        self._remote_normdevrxploss = remote_normdevrxploss
        self._remote_ssrc = remote_ssrc
        self._remote_stdevjitter = remote_stdevjitter
        self._remote_stdevrxploss = remote_stdevrxploss
        self._rtt = rtt
        self._rxcount = rxcount
        self._rxjitter = rxjitter
        self._rxoctetcount = rxoctetcount
        self._rxploss = rxploss
        self._stdevrtt = stdevrtt
        self._txcount = txcount
        self._txjitter = txjitter
        self._txoctetcount = txoctetcount
        self._txploss = txploss

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RTPstat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RTPstat of this RTPstat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_uniqueid(self):
        """Gets the channel_uniqueid of this RTPstat.

        The Asterisk channel's unique ID that owns this instance.

        :return: The channel_uniqueid of this RTPstat.
        :rtype: str
        """
        return self._channel_uniqueid

    @channel_uniqueid.setter
    def channel_uniqueid(self, channel_uniqueid):
        """Sets the channel_uniqueid of this RTPstat.

        The Asterisk channel's unique ID that owns this instance.

        :param channel_uniqueid: The channel_uniqueid of this RTPstat.
        :type channel_uniqueid: str
        """
        if channel_uniqueid is None:
            raise ValueError("Invalid value for `channel_uniqueid`, must not be `None`")

        self._channel_uniqueid = channel_uniqueid

    @property
    def local_maxjitter(self):
        """Gets the local_maxjitter of this RTPstat.

        Maximum jitter on local side.

        :return: The local_maxjitter of this RTPstat.
        :rtype: float
        """
        return self._local_maxjitter

    @local_maxjitter.setter
    def local_maxjitter(self, local_maxjitter):
        """Sets the local_maxjitter of this RTPstat.

        Maximum jitter on local side.

        :param local_maxjitter: The local_maxjitter of this RTPstat.
        :type local_maxjitter: float
        """

        self._local_maxjitter = local_maxjitter

    @property
    def local_maxrxploss(self):
        """Gets the local_maxrxploss of this RTPstat.

        Maximum number of packets lost on local side.

        :return: The local_maxrxploss of this RTPstat.
        :rtype: float
        """
        return self._local_maxrxploss

    @local_maxrxploss.setter
    def local_maxrxploss(self, local_maxrxploss):
        """Sets the local_maxrxploss of this RTPstat.

        Maximum number of packets lost on local side.

        :param local_maxrxploss: The local_maxrxploss of this RTPstat.
        :type local_maxrxploss: float
        """

        self._local_maxrxploss = local_maxrxploss

    @property
    def local_minjitter(self):
        """Gets the local_minjitter of this RTPstat.

        Minimum jitter on local side.

        :return: The local_minjitter of this RTPstat.
        :rtype: float
        """
        return self._local_minjitter

    @local_minjitter.setter
    def local_minjitter(self, local_minjitter):
        """Sets the local_minjitter of this RTPstat.

        Minimum jitter on local side.

        :param local_minjitter: The local_minjitter of this RTPstat.
        :type local_minjitter: float
        """

        self._local_minjitter = local_minjitter

    @property
    def local_minrxploss(self):
        """Gets the local_minrxploss of this RTPstat.

        Minimum number of packets lost on local side.

        :return: The local_minrxploss of this RTPstat.
        :rtype: float
        """
        return self._local_minrxploss

    @local_minrxploss.setter
    def local_minrxploss(self, local_minrxploss):
        """Sets the local_minrxploss of this RTPstat.

        Minimum number of packets lost on local side.

        :param local_minrxploss: The local_minrxploss of this RTPstat.
        :type local_minrxploss: float
        """

        self._local_minrxploss = local_minrxploss

    @property
    def local_normdevjitter(self):
        """Gets the local_normdevjitter of this RTPstat.

        Average jitter on local side.

        :return: The local_normdevjitter of this RTPstat.
        :rtype: float
        """
        return self._local_normdevjitter

    @local_normdevjitter.setter
    def local_normdevjitter(self, local_normdevjitter):
        """Sets the local_normdevjitter of this RTPstat.

        Average jitter on local side.

        :param local_normdevjitter: The local_normdevjitter of this RTPstat.
        :type local_normdevjitter: float
        """

        self._local_normdevjitter = local_normdevjitter

    @property
    def local_normdevrxploss(self):
        """Gets the local_normdevrxploss of this RTPstat.

        Average number of packets lost on local side.

        :return: The local_normdevrxploss of this RTPstat.
        :rtype: float
        """
        return self._local_normdevrxploss

    @local_normdevrxploss.setter
    def local_normdevrxploss(self, local_normdevrxploss):
        """Sets the local_normdevrxploss of this RTPstat.

        Average number of packets lost on local side.

        :param local_normdevrxploss: The local_normdevrxploss of this RTPstat.
        :type local_normdevrxploss: float
        """

        self._local_normdevrxploss = local_normdevrxploss

    @property
    def local_ssrc(self):
        """Gets the local_ssrc of this RTPstat.

        Our SSRC.

        :return: The local_ssrc of this RTPstat.
        :rtype: int
        """
        return self._local_ssrc

    @local_ssrc.setter
    def local_ssrc(self, local_ssrc):
        """Sets the local_ssrc of this RTPstat.

        Our SSRC.

        :param local_ssrc: The local_ssrc of this RTPstat.
        :type local_ssrc: int
        """
        if local_ssrc is None:
            raise ValueError("Invalid value for `local_ssrc`, must not be `None`")

        self._local_ssrc = local_ssrc

    @property
    def local_stdevjitter(self):
        """Gets the local_stdevjitter of this RTPstat.

        Standard deviation jitter on local side.

        :return: The local_stdevjitter of this RTPstat.
        :rtype: float
        """
        return self._local_stdevjitter

    @local_stdevjitter.setter
    def local_stdevjitter(self, local_stdevjitter):
        """Sets the local_stdevjitter of this RTPstat.

        Standard deviation jitter on local side.

        :param local_stdevjitter: The local_stdevjitter of this RTPstat.
        :type local_stdevjitter: float
        """

        self._local_stdevjitter = local_stdevjitter

    @property
    def local_stdevrxploss(self):
        """Gets the local_stdevrxploss of this RTPstat.

        Standard deviation packets lost on local side.

        :return: The local_stdevrxploss of this RTPstat.
        :rtype: float
        """
        return self._local_stdevrxploss

    @local_stdevrxploss.setter
    def local_stdevrxploss(self, local_stdevrxploss):
        """Sets the local_stdevrxploss of this RTPstat.

        Standard deviation packets lost on local side.

        :param local_stdevrxploss: The local_stdevrxploss of this RTPstat.
        :type local_stdevrxploss: float
        """

        self._local_stdevrxploss = local_stdevrxploss

    @property
    def maxrtt(self):
        """Gets the maxrtt of this RTPstat.

        Maximum round trip time.

        :return: The maxrtt of this RTPstat.
        :rtype: float
        """
        return self._maxrtt

    @maxrtt.setter
    def maxrtt(self, maxrtt):
        """Sets the maxrtt of this RTPstat.

        Maximum round trip time.

        :param maxrtt: The maxrtt of this RTPstat.
        :type maxrtt: float
        """

        self._maxrtt = maxrtt

    @property
    def minrtt(self):
        """Gets the minrtt of this RTPstat.

        Minimum round trip time.

        :return: The minrtt of this RTPstat.
        :rtype: float
        """
        return self._minrtt

    @minrtt.setter
    def minrtt(self, minrtt):
        """Sets the minrtt of this RTPstat.

        Minimum round trip time.

        :param minrtt: The minrtt of this RTPstat.
        :type minrtt: float
        """

        self._minrtt = minrtt

    @property
    def normdevrtt(self):
        """Gets the normdevrtt of this RTPstat.

        Average round trip time.

        :return: The normdevrtt of this RTPstat.
        :rtype: float
        """
        return self._normdevrtt

    @normdevrtt.setter
    def normdevrtt(self, normdevrtt):
        """Sets the normdevrtt of this RTPstat.

        Average round trip time.

        :param normdevrtt: The normdevrtt of this RTPstat.
        :type normdevrtt: float
        """

        self._normdevrtt = normdevrtt

    @property
    def remote_maxjitter(self):
        """Gets the remote_maxjitter of this RTPstat.

        Maximum jitter on remote side.

        :return: The remote_maxjitter of this RTPstat.
        :rtype: float
        """
        return self._remote_maxjitter

    @remote_maxjitter.setter
    def remote_maxjitter(self, remote_maxjitter):
        """Sets the remote_maxjitter of this RTPstat.

        Maximum jitter on remote side.

        :param remote_maxjitter: The remote_maxjitter of this RTPstat.
        :type remote_maxjitter: float
        """

        self._remote_maxjitter = remote_maxjitter

    @property
    def remote_maxrxploss(self):
        """Gets the remote_maxrxploss of this RTPstat.

        Maximum number of packets lost on remote side.

        :return: The remote_maxrxploss of this RTPstat.
        :rtype: float
        """
        return self._remote_maxrxploss

    @remote_maxrxploss.setter
    def remote_maxrxploss(self, remote_maxrxploss):
        """Sets the remote_maxrxploss of this RTPstat.

        Maximum number of packets lost on remote side.

        :param remote_maxrxploss: The remote_maxrxploss of this RTPstat.
        :type remote_maxrxploss: float
        """

        self._remote_maxrxploss = remote_maxrxploss

    @property
    def remote_minjitter(self):
        """Gets the remote_minjitter of this RTPstat.

        Minimum jitter on remote side.

        :return: The remote_minjitter of this RTPstat.
        :rtype: float
        """
        return self._remote_minjitter

    @remote_minjitter.setter
    def remote_minjitter(self, remote_minjitter):
        """Sets the remote_minjitter of this RTPstat.

        Minimum jitter on remote side.

        :param remote_minjitter: The remote_minjitter of this RTPstat.
        :type remote_minjitter: float
        """

        self._remote_minjitter = remote_minjitter

    @property
    def remote_minrxploss(self):
        """Gets the remote_minrxploss of this RTPstat.

        Minimum number of packets lost on remote side.

        :return: The remote_minrxploss of this RTPstat.
        :rtype: float
        """
        return self._remote_minrxploss

    @remote_minrxploss.setter
    def remote_minrxploss(self, remote_minrxploss):
        """Sets the remote_minrxploss of this RTPstat.

        Minimum number of packets lost on remote side.

        :param remote_minrxploss: The remote_minrxploss of this RTPstat.
        :type remote_minrxploss: float
        """

        self._remote_minrxploss = remote_minrxploss

    @property
    def remote_normdevjitter(self):
        """Gets the remote_normdevjitter of this RTPstat.

        Average jitter on remote side.

        :return: The remote_normdevjitter of this RTPstat.
        :rtype: float
        """
        return self._remote_normdevjitter

    @remote_normdevjitter.setter
    def remote_normdevjitter(self, remote_normdevjitter):
        """Sets the remote_normdevjitter of this RTPstat.

        Average jitter on remote side.

        :param remote_normdevjitter: The remote_normdevjitter of this RTPstat.
        :type remote_normdevjitter: float
        """

        self._remote_normdevjitter = remote_normdevjitter

    @property
    def remote_normdevrxploss(self):
        """Gets the remote_normdevrxploss of this RTPstat.

        Average number of packets lost on remote side.

        :return: The remote_normdevrxploss of this RTPstat.
        :rtype: float
        """
        return self._remote_normdevrxploss

    @remote_normdevrxploss.setter
    def remote_normdevrxploss(self, remote_normdevrxploss):
        """Sets the remote_normdevrxploss of this RTPstat.

        Average number of packets lost on remote side.

        :param remote_normdevrxploss: The remote_normdevrxploss of this RTPstat.
        :type remote_normdevrxploss: float
        """

        self._remote_normdevrxploss = remote_normdevrxploss

    @property
    def remote_ssrc(self):
        """Gets the remote_ssrc of this RTPstat.

        Their SSRC.

        :return: The remote_ssrc of this RTPstat.
        :rtype: int
        """
        return self._remote_ssrc

    @remote_ssrc.setter
    def remote_ssrc(self, remote_ssrc):
        """Sets the remote_ssrc of this RTPstat.

        Their SSRC.

        :param remote_ssrc: The remote_ssrc of this RTPstat.
        :type remote_ssrc: int
        """
        if remote_ssrc is None:
            raise ValueError("Invalid value for `remote_ssrc`, must not be `None`")

        self._remote_ssrc = remote_ssrc

    @property
    def remote_stdevjitter(self):
        """Gets the remote_stdevjitter of this RTPstat.

        Standard deviation jitter on remote side.

        :return: The remote_stdevjitter of this RTPstat.
        :rtype: float
        """
        return self._remote_stdevjitter

    @remote_stdevjitter.setter
    def remote_stdevjitter(self, remote_stdevjitter):
        """Sets the remote_stdevjitter of this RTPstat.

        Standard deviation jitter on remote side.

        :param remote_stdevjitter: The remote_stdevjitter of this RTPstat.
        :type remote_stdevjitter: float
        """

        self._remote_stdevjitter = remote_stdevjitter

    @property
    def remote_stdevrxploss(self):
        """Gets the remote_stdevrxploss of this RTPstat.

        Standard deviation packets lost on remote side.

        :return: The remote_stdevrxploss of this RTPstat.
        :rtype: float
        """
        return self._remote_stdevrxploss

    @remote_stdevrxploss.setter
    def remote_stdevrxploss(self, remote_stdevrxploss):
        """Sets the remote_stdevrxploss of this RTPstat.

        Standard deviation packets lost on remote side.

        :param remote_stdevrxploss: The remote_stdevrxploss of this RTPstat.
        :type remote_stdevrxploss: float
        """

        self._remote_stdevrxploss = remote_stdevrxploss

    @property
    def rtt(self):
        """Gets the rtt of this RTPstat.

        Total round trip time.

        :return: The rtt of this RTPstat.
        :rtype: float
        """
        return self._rtt

    @rtt.setter
    def rtt(self, rtt):
        """Sets the rtt of this RTPstat.

        Total round trip time.

        :param rtt: The rtt of this RTPstat.
        :type rtt: float
        """

        self._rtt = rtt

    @property
    def rxcount(self):
        """Gets the rxcount of this RTPstat.

        Number of packets received.

        :return: The rxcount of this RTPstat.
        :rtype: int
        """
        return self._rxcount

    @rxcount.setter
    def rxcount(self, rxcount):
        """Sets the rxcount of this RTPstat.

        Number of packets received.

        :param rxcount: The rxcount of this RTPstat.
        :type rxcount: int
        """
        if rxcount is None:
            raise ValueError("Invalid value for `rxcount`, must not be `None`")

        self._rxcount = rxcount

    @property
    def rxjitter(self):
        """Gets the rxjitter of this RTPstat.

        Jitter on received packets.

        :return: The rxjitter of this RTPstat.
        :rtype: float
        """
        return self._rxjitter

    @rxjitter.setter
    def rxjitter(self, rxjitter):
        """Sets the rxjitter of this RTPstat.

        Jitter on received packets.

        :param rxjitter: The rxjitter of this RTPstat.
        :type rxjitter: float
        """

        self._rxjitter = rxjitter

    @property
    def rxoctetcount(self):
        """Gets the rxoctetcount of this RTPstat.

        Number of octets received.

        :return: The rxoctetcount of this RTPstat.
        :rtype: int
        """
        return self._rxoctetcount

    @rxoctetcount.setter
    def rxoctetcount(self, rxoctetcount):
        """Sets the rxoctetcount of this RTPstat.

        Number of octets received.

        :param rxoctetcount: The rxoctetcount of this RTPstat.
        :type rxoctetcount: int
        """
        if rxoctetcount is None:
            raise ValueError("Invalid value for `rxoctetcount`, must not be `None`")

        self._rxoctetcount = rxoctetcount

    @property
    def rxploss(self):
        """Gets the rxploss of this RTPstat.

        Number of received packets lost.

        :return: The rxploss of this RTPstat.
        :rtype: int
        """
        return self._rxploss

    @rxploss.setter
    def rxploss(self, rxploss):
        """Sets the rxploss of this RTPstat.

        Number of received packets lost.

        :param rxploss: The rxploss of this RTPstat.
        :type rxploss: int
        """
        if rxploss is None:
            raise ValueError("Invalid value for `rxploss`, must not be `None`")

        self._rxploss = rxploss

    @property
    def stdevrtt(self):
        """Gets the stdevrtt of this RTPstat.

        Standard deviation round trip time.

        :return: The stdevrtt of this RTPstat.
        :rtype: float
        """
        return self._stdevrtt

    @stdevrtt.setter
    def stdevrtt(self, stdevrtt):
        """Sets the stdevrtt of this RTPstat.

        Standard deviation round trip time.

        :param stdevrtt: The stdevrtt of this RTPstat.
        :type stdevrtt: float
        """

        self._stdevrtt = stdevrtt

    @property
    def txcount(self):
        """Gets the txcount of this RTPstat.

        Number of packets transmitted.

        :return: The txcount of this RTPstat.
        :rtype: int
        """
        return self._txcount

    @txcount.setter
    def txcount(self, txcount):
        """Sets the txcount of this RTPstat.

        Number of packets transmitted.

        :param txcount: The txcount of this RTPstat.
        :type txcount: int
        """
        if txcount is None:
            raise ValueError("Invalid value for `txcount`, must not be `None`")

        self._txcount = txcount

    @property
    def txjitter(self):
        """Gets the txjitter of this RTPstat.

        Jitter on transmitted packets.

        :return: The txjitter of this RTPstat.
        :rtype: float
        """
        return self._txjitter

    @txjitter.setter
    def txjitter(self, txjitter):
        """Sets the txjitter of this RTPstat.

        Jitter on transmitted packets.

        :param txjitter: The txjitter of this RTPstat.
        :type txjitter: float
        """

        self._txjitter = txjitter

    @property
    def txoctetcount(self):
        """Gets the txoctetcount of this RTPstat.

        Number of octets transmitted.

        :return: The txoctetcount of this RTPstat.
        :rtype: int
        """
        return self._txoctetcount

    @txoctetcount.setter
    def txoctetcount(self, txoctetcount):
        """Sets the txoctetcount of this RTPstat.

        Number of octets transmitted.

        :param txoctetcount: The txoctetcount of this RTPstat.
        :type txoctetcount: int
        """
        if txoctetcount is None:
            raise ValueError("Invalid value for `txoctetcount`, must not be `None`")

        self._txoctetcount = txoctetcount

    @property
    def txploss(self):
        """Gets the txploss of this RTPstat.

        Number of transmitted packets lost.

        :return: The txploss of this RTPstat.
        :rtype: int
        """
        return self._txploss

    @txploss.setter
    def txploss(self, txploss):
        """Sets the txploss of this RTPstat.

        Number of transmitted packets lost.

        :param txploss: The txploss of this RTPstat.
        :type txploss: int
        """
        if txploss is None:
            raise ValueError("Invalid value for `txploss`, must not be `None`")

        self._txploss = txploss
