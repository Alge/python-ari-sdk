# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Playback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, language: str=None, media_uri: str=None, next_media_uri: str=None, state: str=None, target_uri: str=None):
        """Playback - a model defined in OpenAPI

        :param id: The id of this Playback.
        :param language: The language of this Playback.
        :param media_uri: The media_uri of this Playback.
        :param next_media_uri: The next_media_uri of this Playback.
        :param state: The state of this Playback.
        :param target_uri: The target_uri of this Playback.
        """
        self.openapi_types = {
            'id': str,
            'language': str,
            'media_uri': str,
            'next_media_uri': str,
            'state': str,
            'target_uri': str
        }

        self.attribute_map = {
            'id': 'id',
            'language': 'language',
            'media_uri': 'media_uri',
            'next_media_uri': 'next_media_uri',
            'state': 'state',
            'target_uri': 'target_uri'
        }

        self._id = id
        self._language = language
        self._media_uri = media_uri
        self._next_media_uri = next_media_uri
        self._state = state
        self._target_uri = target_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Playback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Playback of this Playback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Playback.

        ID for this playback operation

        :return: The id of this Playback.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Playback.

        ID for this playback operation

        :param id: The id of this Playback.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def language(self):
        """Gets the language of this Playback.

        For media types that support multiple languages, the language requested for playback.

        :return: The language of this Playback.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Playback.

        For media types that support multiple languages, the language requested for playback.

        :param language: The language of this Playback.
        :type language: str
        """

        self._language = language

    @property
    def media_uri(self):
        """Gets the media_uri of this Playback.

        The URI for the media currently being played back.

        :return: The media_uri of this Playback.
        :rtype: str
        """
        return self._media_uri

    @media_uri.setter
    def media_uri(self, media_uri):
        """Sets the media_uri of this Playback.

        The URI for the media currently being played back.

        :param media_uri: The media_uri of this Playback.
        :type media_uri: str
        """
        if media_uri is None:
            raise ValueError("Invalid value for `media_uri`, must not be `None`")

        self._media_uri = media_uri

    @property
    def next_media_uri(self):
        """Gets the next_media_uri of this Playback.

        If a list of URIs is being played, the next media URI to be played back.

        :return: The next_media_uri of this Playback.
        :rtype: str
        """
        return self._next_media_uri

    @next_media_uri.setter
    def next_media_uri(self, next_media_uri):
        """Sets the next_media_uri of this Playback.

        If a list of URIs is being played, the next media URI to be played back.

        :param next_media_uri: The next_media_uri of this Playback.
        :type next_media_uri: str
        """

        self._next_media_uri = next_media_uri

    @property
    def state(self):
        """Gets the state of this Playback.

        Current state of the playback operation.

        :return: The state of this Playback.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Playback.

        Current state of the playback operation.

        :param state: The state of this Playback.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def target_uri(self):
        """Gets the target_uri of this Playback.

        URI for the channel or bridge to play the media on

        :return: The target_uri of this Playback.
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this Playback.

        URI for the channel or bridge to play the media on

        :param target_uri: The target_uri of this Playback.
        :type target_uri: str
        """
        if target_uri is None:
            raise ValueError("Invalid value for `target_uri`, must not be `None`")

        self._target_uri = target_uri
