# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Module(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, status: str=None, support_level: str=None, use_count: int=None):
        """Module - a model defined in OpenAPI

        :param description: The description of this Module.
        :param name: The name of this Module.
        :param status: The status of this Module.
        :param support_level: The support_level of this Module.
        :param use_count: The use_count of this Module.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'status': str,
            'support_level': str,
            'use_count': int
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'status': 'status',
            'support_level': 'support_level',
            'use_count': 'use_count'
        }

        self._description = description
        self._name = name
        self._status = status
        self._support_level = support_level
        self._use_count = use_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Module':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Module of this Module.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Module.

        The description of this module

        :return: The description of this Module.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Module.

        The description of this module

        :param description: The description of this Module.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this Module.

        The name of this module

        :return: The name of this Module.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Module.

        The name of this module

        :param name: The name of this Module.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this Module.

        The running status of this module

        :return: The status of this Module.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Module.

        The running status of this module

        :param status: The status of this Module.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def support_level(self):
        """Gets the support_level of this Module.

        The support state of this module

        :return: The support_level of this Module.
        :rtype: str
        """
        return self._support_level

    @support_level.setter
    def support_level(self, support_level):
        """Sets the support_level of this Module.

        The support state of this module

        :param support_level: The support_level of this Module.
        :type support_level: str
        """
        if support_level is None:
            raise ValueError("Invalid value for `support_level`, must not be `None`")

        self._support_level = support_level

    @property
    def use_count(self):
        """Gets the use_count of this Module.

        The number of times this module is being used

        :return: The use_count of this Module.
        :rtype: int
        """
        return self._use_count

    @use_count.setter
    def use_count(self, use_count):
        """Sets the use_count of this Module.

        The number of times this module is being used

        :param use_count: The use_count of this Module.
        :type use_count: int
        """
        if use_count is None:
            raise ValueError("Invalid value for `use_count`, must not be `None`")

        self._use_count = use_count
