# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class AsteriskPing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asterisk_id: str=None, ping: str=None, timestamp: str=None):
        """AsteriskPing - a model defined in OpenAPI

        :param asterisk_id: The asterisk_id of this AsteriskPing.
        :param ping: The ping of this AsteriskPing.
        :param timestamp: The timestamp of this AsteriskPing.
        """
        self.openapi_types = {
            'asterisk_id': str,
            'ping': str,
            'timestamp': str
        }

        self.attribute_map = {
            'asterisk_id': 'asterisk_id',
            'ping': 'ping',
            'timestamp': 'timestamp'
        }

        self._asterisk_id = asterisk_id
        self._ping = ping
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsteriskPing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsteriskPing of this AsteriskPing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asterisk_id(self):
        """Gets the asterisk_id of this AsteriskPing.

        Asterisk id info

        :return: The asterisk_id of this AsteriskPing.
        :rtype: str
        """
        return self._asterisk_id

    @asterisk_id.setter
    def asterisk_id(self, asterisk_id):
        """Sets the asterisk_id of this AsteriskPing.

        Asterisk id info

        :param asterisk_id: The asterisk_id of this AsteriskPing.
        :type asterisk_id: str
        """
        if asterisk_id is None:
            raise ValueError("Invalid value for `asterisk_id`, must not be `None`")

        self._asterisk_id = asterisk_id

    @property
    def ping(self):
        """Gets the ping of this AsteriskPing.

        Always string value is pong

        :return: The ping of this AsteriskPing.
        :rtype: str
        """
        return self._ping

    @ping.setter
    def ping(self, ping):
        """Sets the ping of this AsteriskPing.

        Always string value is pong

        :param ping: The ping of this AsteriskPing.
        :type ping: str
        """
        if ping is None:
            raise ValueError("Invalid value for `ping`, must not be `None`")

        self._ping = ping

    @property
    def timestamp(self):
        """Gets the timestamp of this AsteriskPing.

        The timestamp string of request received time

        :return: The timestamp of this AsteriskPing.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AsteriskPing.

        The timestamp string of request received time

        :param timestamp: The timestamp of this AsteriskPing.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
