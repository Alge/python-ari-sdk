# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class StatusInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_reload_time: date=None, startup_time: date=None):
        """StatusInfo - a model defined in OpenAPI

        :param last_reload_time: The last_reload_time of this StatusInfo.
        :param startup_time: The startup_time of this StatusInfo.
        """
        self.openapi_types = {
            'last_reload_time': date,
            'startup_time': date
        }

        self.attribute_map = {
            'last_reload_time': 'last_reload_time',
            'startup_time': 'startup_time'
        }

        self._last_reload_time = last_reload_time
        self._startup_time = startup_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusInfo of this StatusInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_reload_time(self):
        """Gets the last_reload_time of this StatusInfo.

        Time when Asterisk was last reloaded.

        :return: The last_reload_time of this StatusInfo.
        :rtype: date
        """
        return self._last_reload_time

    @last_reload_time.setter
    def last_reload_time(self, last_reload_time):
        """Sets the last_reload_time of this StatusInfo.

        Time when Asterisk was last reloaded.

        :param last_reload_time: The last_reload_time of this StatusInfo.
        :type last_reload_time: date
        """
        if last_reload_time is None:
            raise ValueError("Invalid value for `last_reload_time`, must not be `None`")

        self._last_reload_time = last_reload_time

    @property
    def startup_time(self):
        """Gets the startup_time of this StatusInfo.

        Time when Asterisk was started.

        :return: The startup_time of this StatusInfo.
        :rtype: date
        """
        return self._startup_time

    @startup_time.setter
    def startup_time(self, startup_time):
        """Sets the startup_time of this StatusInfo.

        Time when Asterisk was started.

        :param startup_time: The startup_time of this StatusInfo.
        :type startup_time: date
        """
        if startup_time is None:
            raise ValueError("Invalid value for `startup_time`, must not be `None`")

        self._startup_time = startup_time
