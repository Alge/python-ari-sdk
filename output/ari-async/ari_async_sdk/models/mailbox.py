# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Mailbox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, new_messages: int=None, old_messages: int=None):
        """Mailbox - a model defined in OpenAPI

        :param name: The name of this Mailbox.
        :param new_messages: The new_messages of this Mailbox.
        :param old_messages: The old_messages of this Mailbox.
        """
        self.openapi_types = {
            'name': str,
            'new_messages': int,
            'old_messages': int
        }

        self.attribute_map = {
            'name': 'name',
            'new_messages': 'new_messages',
            'old_messages': 'old_messages'
        }

        self._name = name
        self._new_messages = new_messages
        self._old_messages = old_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mailbox':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mailbox of this Mailbox.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Mailbox.

        Name of the mailbox.

        :return: The name of this Mailbox.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Mailbox.

        Name of the mailbox.

        :param name: The name of this Mailbox.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def new_messages(self):
        """Gets the new_messages of this Mailbox.

        Count of new messages in the mailbox.

        :return: The new_messages of this Mailbox.
        :rtype: int
        """
        return self._new_messages

    @new_messages.setter
    def new_messages(self, new_messages):
        """Sets the new_messages of this Mailbox.

        Count of new messages in the mailbox.

        :param new_messages: The new_messages of this Mailbox.
        :type new_messages: int
        """
        if new_messages is None:
            raise ValueError("Invalid value for `new_messages`, must not be `None`")

        self._new_messages = new_messages

    @property
    def old_messages(self):
        """Gets the old_messages of this Mailbox.

        Count of old messages in the mailbox.

        :return: The old_messages of this Mailbox.
        :rtype: int
        """
        return self._old_messages

    @old_messages.setter
    def old_messages(self, old_messages):
        """Sets the old_messages of this Mailbox.

        Count of old messages in the mailbox.

        :param old_messages: The old_messages of this Mailbox.
        :type old_messages: int
        """
        if old_messages is None:
            raise ValueError("Invalid value for `old_messages`, must not be `None`")

        self._old_messages = old_messages
