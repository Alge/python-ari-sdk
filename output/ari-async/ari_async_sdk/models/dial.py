# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk.models.channel import Channel
from ari_async_sdk.models.event import Event
from ari_async_sdk import util


class Dial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, timestamp: date=None, asterisk_id: str=None, type: str=None, caller: Channel=None, dialstatus: str=None, dialstring: str=None, forward: str=None, forwarded: Channel=None, peer: Channel=None):
        """Dial - a model defined in OpenAPI

        :param application: The application of this Dial.
        :param timestamp: The timestamp of this Dial.
        :param asterisk_id: The asterisk_id of this Dial.
        :param type: The type of this Dial.
        :param caller: The caller of this Dial.
        :param dialstatus: The dialstatus of this Dial.
        :param dialstring: The dialstring of this Dial.
        :param forward: The forward of this Dial.
        :param forwarded: The forwarded of this Dial.
        :param peer: The peer of this Dial.
        """
        self.openapi_types = {
            'application': str,
            'timestamp': date,
            'asterisk_id': str,
            'type': str,
            'caller': Channel,
            'dialstatus': str,
            'dialstring': str,
            'forward': str,
            'forwarded': Channel,
            'peer': Channel
        }

        self.attribute_map = {
            'application': 'application',
            'timestamp': 'timestamp',
            'asterisk_id': 'asterisk_id',
            'type': 'type',
            'caller': 'caller',
            'dialstatus': 'dialstatus',
            'dialstring': 'dialstring',
            'forward': 'forward',
            'forwarded': 'forwarded',
            'peer': 'peer'
        }

        self._application = application
        self._timestamp = timestamp
        self._asterisk_id = asterisk_id
        self._type = type
        self._caller = caller
        self._dialstatus = dialstatus
        self._dialstring = dialstring
        self._forward = forward
        self._forwarded = forwarded
        self._peer = peer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dial of this Dial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this Dial.

        Name of the application receiving the event.

        :return: The application of this Dial.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this Dial.

        Name of the application receiving the event.

        :param application: The application of this Dial.
        :type application: str
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")

        self._application = application

    @property
    def timestamp(self):
        """Gets the timestamp of this Dial.

        Time at which this event was created.

        :return: The timestamp of this Dial.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Dial.

        Time at which this event was created.

        :param timestamp: The timestamp of this Dial.
        :type timestamp: date
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def asterisk_id(self):
        """Gets the asterisk_id of this Dial.

        The unique ID for the Asterisk instance that raised this event.

        :return: The asterisk_id of this Dial.
        :rtype: str
        """
        return self._asterisk_id

    @asterisk_id.setter
    def asterisk_id(self, asterisk_id):
        """Sets the asterisk_id of this Dial.

        The unique ID for the Asterisk instance that raised this event.

        :param asterisk_id: The asterisk_id of this Dial.
        :type asterisk_id: str
        """

        self._asterisk_id = asterisk_id

    @property
    def type(self):
        """Gets the type of this Dial.

        Indicates the type of this message.

        :return: The type of this Dial.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dial.

        Indicates the type of this message.

        :param type: The type of this Dial.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def caller(self):
        """Gets the caller of this Dial.


        :return: The caller of this Dial.
        :rtype: Channel
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this Dial.


        :param caller: The caller of this Dial.
        :type caller: Channel
        """

        self._caller = caller

    @property
    def dialstatus(self):
        """Gets the dialstatus of this Dial.

        Current status of the dialing attempt to the peer.

        :return: The dialstatus of this Dial.
        :rtype: str
        """
        return self._dialstatus

    @dialstatus.setter
    def dialstatus(self, dialstatus):
        """Sets the dialstatus of this Dial.

        Current status of the dialing attempt to the peer.

        :param dialstatus: The dialstatus of this Dial.
        :type dialstatus: str
        """
        if dialstatus is None:
            raise ValueError("Invalid value for `dialstatus`, must not be `None`")

        self._dialstatus = dialstatus

    @property
    def dialstring(self):
        """Gets the dialstring of this Dial.

        The dial string for calling the peer channel.

        :return: The dialstring of this Dial.
        :rtype: str
        """
        return self._dialstring

    @dialstring.setter
    def dialstring(self, dialstring):
        """Sets the dialstring of this Dial.

        The dial string for calling the peer channel.

        :param dialstring: The dialstring of this Dial.
        :type dialstring: str
        """

        self._dialstring = dialstring

    @property
    def forward(self):
        """Gets the forward of this Dial.

        Forwarding target requested by the original dialed channel.

        :return: The forward of this Dial.
        :rtype: str
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """Sets the forward of this Dial.

        Forwarding target requested by the original dialed channel.

        :param forward: The forward of this Dial.
        :type forward: str
        """

        self._forward = forward

    @property
    def forwarded(self):
        """Gets the forwarded of this Dial.


        :return: The forwarded of this Dial.
        :rtype: Channel
        """
        return self._forwarded

    @forwarded.setter
    def forwarded(self, forwarded):
        """Sets the forwarded of this Dial.


        :param forwarded: The forwarded of this Dial.
        :type forwarded: Channel
        """

        self._forwarded = forwarded

    @property
    def peer(self):
        """Gets the peer of this Dial.


        :return: The peer of this Dial.
        :rtype: Channel
        """
        return self._peer

    @peer.setter
    def peer(self, peer):
        """Sets the peer of this Dial.


        :param peer: The peer of this Dial.
        :type peer: Channel
        """
        if peer is None:
            raise ValueError("Invalid value for `peer`, must not be `None`")

        self._peer = peer
