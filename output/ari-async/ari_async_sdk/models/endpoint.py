# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_ids: List[str]=None, resource: str=None, state: str=None, technology: str=None):
        """Endpoint - a model defined in OpenAPI

        :param channel_ids: The channel_ids of this Endpoint.
        :param resource: The resource of this Endpoint.
        :param state: The state of this Endpoint.
        :param technology: The technology of this Endpoint.
        """
        self.openapi_types = {
            'channel_ids': List[str],
            'resource': str,
            'state': str,
            'technology': str
        }

        self.attribute_map = {
            'channel_ids': 'channel_ids',
            'resource': 'resource',
            'state': 'state',
            'technology': 'technology'
        }

        self._channel_ids = channel_ids
        self._resource = resource
        self._state = state
        self._technology = technology

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_ids(self):
        """Gets the channel_ids of this Endpoint.

        Id's of channels associated with this endpoint

        :return: The channel_ids of this Endpoint.
        :rtype: List[str]
        """
        return self._channel_ids

    @channel_ids.setter
    def channel_ids(self, channel_ids):
        """Sets the channel_ids of this Endpoint.

        Id's of channels associated with this endpoint

        :param channel_ids: The channel_ids of this Endpoint.
        :type channel_ids: List[str]
        """
        if channel_ids is None:
            raise ValueError("Invalid value for `channel_ids`, must not be `None`")

        self._channel_ids = channel_ids

    @property
    def resource(self):
        """Gets the resource of this Endpoint.

        Identifier of the endpoint, specific to the given technology.

        :return: The resource of this Endpoint.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Endpoint.

        Identifier of the endpoint, specific to the given technology.

        :param resource: The resource of this Endpoint.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def state(self):
        """Gets the state of this Endpoint.

        Endpoint's state

        :return: The state of this Endpoint.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Endpoint.

        Endpoint's state

        :param state: The state of this Endpoint.
        :type state: str
        """

        self._state = state

    @property
    def technology(self):
        """Gets the technology of this Endpoint.

        Technology of the endpoint

        :return: The technology of this Endpoint.
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this Endpoint.

        Technology of the endpoint

        :param technology: The technology of this Endpoint.
        :type technology: str
        """
        if technology is None:
            raise ValueError("Invalid value for `technology`, must not be `None`")

        self._technology = technology
