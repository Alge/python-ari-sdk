# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Bridge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge_class: str=None, bridge_type: str=None, channels: List[str]=None, creationtime: date=None, creator: str=None, id: str=None, name: str=None, technology: str=None, video_mode: str=None, video_source_id: str=None):
        """Bridge - a model defined in OpenAPI

        :param bridge_class: The bridge_class of this Bridge.
        :param bridge_type: The bridge_type of this Bridge.
        :param channels: The channels of this Bridge.
        :param creationtime: The creationtime of this Bridge.
        :param creator: The creator of this Bridge.
        :param id: The id of this Bridge.
        :param name: The name of this Bridge.
        :param technology: The technology of this Bridge.
        :param video_mode: The video_mode of this Bridge.
        :param video_source_id: The video_source_id of this Bridge.
        """
        self.openapi_types = {
            'bridge_class': str,
            'bridge_type': str,
            'channels': List[str],
            'creationtime': date,
            'creator': str,
            'id': str,
            'name': str,
            'technology': str,
            'video_mode': str,
            'video_source_id': str
        }

        self.attribute_map = {
            'bridge_class': 'bridge_class',
            'bridge_type': 'bridge_type',
            'channels': 'channels',
            'creationtime': 'creationtime',
            'creator': 'creator',
            'id': 'id',
            'name': 'name',
            'technology': 'technology',
            'video_mode': 'video_mode',
            'video_source_id': 'video_source_id'
        }

        self._bridge_class = bridge_class
        self._bridge_type = bridge_type
        self._channels = channels
        self._creationtime = creationtime
        self._creator = creator
        self._id = id
        self._name = name
        self._technology = technology
        self._video_mode = video_mode
        self._video_source_id = video_source_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bridge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bridge of this Bridge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge_class(self):
        """Gets the bridge_class of this Bridge.

        Bridging class

        :return: The bridge_class of this Bridge.
        :rtype: str
        """
        return self._bridge_class

    @bridge_class.setter
    def bridge_class(self, bridge_class):
        """Sets the bridge_class of this Bridge.

        Bridging class

        :param bridge_class: The bridge_class of this Bridge.
        :type bridge_class: str
        """
        if bridge_class is None:
            raise ValueError("Invalid value for `bridge_class`, must not be `None`")

        self._bridge_class = bridge_class

    @property
    def bridge_type(self):
        """Gets the bridge_type of this Bridge.

        Type of bridge technology

        :return: The bridge_type of this Bridge.
        :rtype: str
        """
        return self._bridge_type

    @bridge_type.setter
    def bridge_type(self, bridge_type):
        """Sets the bridge_type of this Bridge.

        Type of bridge technology

        :param bridge_type: The bridge_type of this Bridge.
        :type bridge_type: str
        """
        if bridge_type is None:
            raise ValueError("Invalid value for `bridge_type`, must not be `None`")

        self._bridge_type = bridge_type

    @property
    def channels(self):
        """Gets the channels of this Bridge.

        Ids of channels participating in this bridge

        :return: The channels of this Bridge.
        :rtype: List[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Bridge.

        Ids of channels participating in this bridge

        :param channels: The channels of this Bridge.
        :type channels: List[str]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def creationtime(self):
        """Gets the creationtime of this Bridge.

        Timestamp when bridge was created

        :return: The creationtime of this Bridge.
        :rtype: date
        """
        return self._creationtime

    @creationtime.setter
    def creationtime(self, creationtime):
        """Sets the creationtime of this Bridge.

        Timestamp when bridge was created

        :param creationtime: The creationtime of this Bridge.
        :type creationtime: date
        """
        if creationtime is None:
            raise ValueError("Invalid value for `creationtime`, must not be `None`")

        self._creationtime = creationtime

    @property
    def creator(self):
        """Gets the creator of this Bridge.

        Entity that created the bridge

        :return: The creator of this Bridge.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Bridge.

        Entity that created the bridge

        :param creator: The creator of this Bridge.
        :type creator: str
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def id(self):
        """Gets the id of this Bridge.

        Unique identifier for this bridge

        :return: The id of this Bridge.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bridge.

        Unique identifier for this bridge

        :param id: The id of this Bridge.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Bridge.

        Name the creator gave the bridge

        :return: The name of this Bridge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bridge.

        Name the creator gave the bridge

        :param name: The name of this Bridge.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def technology(self):
        """Gets the technology of this Bridge.

        Name of the current bridging technology

        :return: The technology of this Bridge.
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this Bridge.

        Name of the current bridging technology

        :param technology: The technology of this Bridge.
        :type technology: str
        """
        if technology is None:
            raise ValueError("Invalid value for `technology`, must not be `None`")

        self._technology = technology

    @property
    def video_mode(self):
        """Gets the video_mode of this Bridge.

        The video mode the bridge is using. One of 'none', 'talker', or 'single'.

        :return: The video_mode of this Bridge.
        :rtype: str
        """
        return self._video_mode

    @video_mode.setter
    def video_mode(self, video_mode):
        """Sets the video_mode of this Bridge.

        The video mode the bridge is using. One of 'none', 'talker', or 'single'.

        :param video_mode: The video_mode of this Bridge.
        :type video_mode: str
        """

        self._video_mode = video_mode

    @property
    def video_source_id(self):
        """Gets the video_source_id of this Bridge.

        The ID of the channel that is the source of video in this bridge, if one exists.

        :return: The video_source_id of this Bridge.
        :rtype: str
        """
        return self._video_source_id

    @video_source_id.setter
    def video_source_id(self, video_source_id):
        """Sets the video_source_id of this Bridge.

        The ID of the channel that is the source of video in this bridge, if one exists.

        :param video_source_id: The video_source_id of this Bridge.
        :type video_source_id: str
        """

        self._video_source_id = video_source_id
