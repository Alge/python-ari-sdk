# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class Application(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge_ids: List[str]=None, channel_ids: List[str]=None, device_names: List[str]=None, endpoint_ids: List[str]=None, events_allowed: List[object]=None, events_disallowed: List[object]=None, name: str=None):
        """Application - a model defined in OpenAPI

        :param bridge_ids: The bridge_ids of this Application.
        :param channel_ids: The channel_ids of this Application.
        :param device_names: The device_names of this Application.
        :param endpoint_ids: The endpoint_ids of this Application.
        :param events_allowed: The events_allowed of this Application.
        :param events_disallowed: The events_disallowed of this Application.
        :param name: The name of this Application.
        """
        self.openapi_types = {
            'bridge_ids': List[str],
            'channel_ids': List[str],
            'device_names': List[str],
            'endpoint_ids': List[str],
            'events_allowed': List[object],
            'events_disallowed': List[object],
            'name': str
        }

        self.attribute_map = {
            'bridge_ids': 'bridge_ids',
            'channel_ids': 'channel_ids',
            'device_names': 'device_names',
            'endpoint_ids': 'endpoint_ids',
            'events_allowed': 'events_allowed',
            'events_disallowed': 'events_disallowed',
            'name': 'name'
        }

        self._bridge_ids = bridge_ids
        self._channel_ids = channel_ids
        self._device_names = device_names
        self._endpoint_ids = endpoint_ids
        self._events_allowed = events_allowed
        self._events_disallowed = events_disallowed
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Application of this Application.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge_ids(self):
        """Gets the bridge_ids of this Application.

        Id's for bridges subscribed to.

        :return: The bridge_ids of this Application.
        :rtype: List[str]
        """
        return self._bridge_ids

    @bridge_ids.setter
    def bridge_ids(self, bridge_ids):
        """Sets the bridge_ids of this Application.

        Id's for bridges subscribed to.

        :param bridge_ids: The bridge_ids of this Application.
        :type bridge_ids: List[str]
        """
        if bridge_ids is None:
            raise ValueError("Invalid value for `bridge_ids`, must not be `None`")

        self._bridge_ids = bridge_ids

    @property
    def channel_ids(self):
        """Gets the channel_ids of this Application.

        Id's for channels subscribed to.

        :return: The channel_ids of this Application.
        :rtype: List[str]
        """
        return self._channel_ids

    @channel_ids.setter
    def channel_ids(self, channel_ids):
        """Sets the channel_ids of this Application.

        Id's for channels subscribed to.

        :param channel_ids: The channel_ids of this Application.
        :type channel_ids: List[str]
        """
        if channel_ids is None:
            raise ValueError("Invalid value for `channel_ids`, must not be `None`")

        self._channel_ids = channel_ids

    @property
    def device_names(self):
        """Gets the device_names of this Application.

        Names of the devices subscribed to.

        :return: The device_names of this Application.
        :rtype: List[str]
        """
        return self._device_names

    @device_names.setter
    def device_names(self, device_names):
        """Sets the device_names of this Application.

        Names of the devices subscribed to.

        :param device_names: The device_names of this Application.
        :type device_names: List[str]
        """
        if device_names is None:
            raise ValueError("Invalid value for `device_names`, must not be `None`")

        self._device_names = device_names

    @property
    def endpoint_ids(self):
        """Gets the endpoint_ids of this Application.

        {tech}/{resource} for endpoints subscribed to.

        :return: The endpoint_ids of this Application.
        :rtype: List[str]
        """
        return self._endpoint_ids

    @endpoint_ids.setter
    def endpoint_ids(self, endpoint_ids):
        """Sets the endpoint_ids of this Application.

        {tech}/{resource} for endpoints subscribed to.

        :param endpoint_ids: The endpoint_ids of this Application.
        :type endpoint_ids: List[str]
        """
        if endpoint_ids is None:
            raise ValueError("Invalid value for `endpoint_ids`, must not be `None`")

        self._endpoint_ids = endpoint_ids

    @property
    def events_allowed(self):
        """Gets the events_allowed of this Application.

        Event types sent to the application.

        :return: The events_allowed of this Application.
        :rtype: List[object]
        """
        return self._events_allowed

    @events_allowed.setter
    def events_allowed(self, events_allowed):
        """Sets the events_allowed of this Application.

        Event types sent to the application.

        :param events_allowed: The events_allowed of this Application.
        :type events_allowed: List[object]
        """
        if events_allowed is None:
            raise ValueError("Invalid value for `events_allowed`, must not be `None`")

        self._events_allowed = events_allowed

    @property
    def events_disallowed(self):
        """Gets the events_disallowed of this Application.

        Event types not sent to the application.

        :return: The events_disallowed of this Application.
        :rtype: List[object]
        """
        return self._events_disallowed

    @events_disallowed.setter
    def events_disallowed(self, events_disallowed):
        """Sets the events_disallowed of this Application.

        Event types not sent to the application.

        :param events_disallowed: The events_disallowed of this Application.
        :type events_disallowed: List[object]
        """
        if events_disallowed is None:
            raise ValueError("Invalid value for `events_disallowed`, must not be `None`")

        self._events_disallowed = events_disallowed

    @property
    def name(self):
        """Gets the name of this Application.

        Name of this application

        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        Name of this application

        :param name: The name of this Application.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
