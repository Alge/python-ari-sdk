# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk import util


class ConfigTuple(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: str=None, value: str=None):
        """ConfigTuple - a model defined in OpenAPI

        :param attribute: The attribute of this ConfigTuple.
        :param value: The value of this ConfigTuple.
        """
        self.openapi_types = {
            'attribute': str,
            'value': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'value': 'value'
        }

        self._attribute = attribute
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigTuple':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigTuple of this ConfigTuple.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this ConfigTuple.

        A configuration object attribute.

        :return: The attribute of this ConfigTuple.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this ConfigTuple.

        A configuration object attribute.

        :param attribute: The attribute of this ConfigTuple.
        :type attribute: str
        """
        if attribute is None:
            raise ValueError("Invalid value for `attribute`, must not be `None`")

        self._attribute = attribute

    @property
    def value(self):
        """Gets the value of this ConfigTuple.

        The value for the attribute.

        :return: The value of this ConfigTuple.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConfigTuple.

        The value for the attribute.

        :param value: The value of this ConfigTuple.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
