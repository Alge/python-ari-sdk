# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from ari_async_sdk.models.base_model import Model
from ari_async_sdk.models.caller_id import CallerID
from ari_async_sdk.models.dialplan_cep import DialplanCEP
from ari_async_sdk import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accountcode: str=None, caller: CallerID=None, channelvars: object=None, connected: CallerID=None, creationtime: date=None, dialplan: DialplanCEP=None, id: str=None, language: str=None, name: str=None, state: str=None):
        """Channel - a model defined in OpenAPI

        :param accountcode: The accountcode of this Channel.
        :param caller: The caller of this Channel.
        :param channelvars: The channelvars of this Channel.
        :param connected: The connected of this Channel.
        :param creationtime: The creationtime of this Channel.
        :param dialplan: The dialplan of this Channel.
        :param id: The id of this Channel.
        :param language: The language of this Channel.
        :param name: The name of this Channel.
        :param state: The state of this Channel.
        """
        self.openapi_types = {
            'accountcode': str,
            'caller': CallerID,
            'channelvars': object,
            'connected': CallerID,
            'creationtime': date,
            'dialplan': DialplanCEP,
            'id': str,
            'language': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'accountcode': 'accountcode',
            'caller': 'caller',
            'channelvars': 'channelvars',
            'connected': 'connected',
            'creationtime': 'creationtime',
            'dialplan': 'dialplan',
            'id': 'id',
            'language': 'language',
            'name': 'name',
            'state': 'state'
        }

        self._accountcode = accountcode
        self._caller = caller
        self._channelvars = channelvars
        self._connected = connected
        self._creationtime = creationtime
        self._dialplan = dialplan
        self._id = id
        self._language = language
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accountcode(self):
        """Gets the accountcode of this Channel.


        :return: The accountcode of this Channel.
        :rtype: str
        """
        return self._accountcode

    @accountcode.setter
    def accountcode(self, accountcode):
        """Sets the accountcode of this Channel.


        :param accountcode: The accountcode of this Channel.
        :type accountcode: str
        """
        if accountcode is None:
            raise ValueError("Invalid value for `accountcode`, must not be `None`")

        self._accountcode = accountcode

    @property
    def caller(self):
        """Gets the caller of this Channel.


        :return: The caller of this Channel.
        :rtype: CallerID
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this Channel.


        :param caller: The caller of this Channel.
        :type caller: CallerID
        """
        if caller is None:
            raise ValueError("Invalid value for `caller`, must not be `None`")

        self._caller = caller

    @property
    def channelvars(self):
        """Gets the channelvars of this Channel.

        Channel variables

        :return: The channelvars of this Channel.
        :rtype: object
        """
        return self._channelvars

    @channelvars.setter
    def channelvars(self, channelvars):
        """Sets the channelvars of this Channel.

        Channel variables

        :param channelvars: The channelvars of this Channel.
        :type channelvars: object
        """

        self._channelvars = channelvars

    @property
    def connected(self):
        """Gets the connected of this Channel.


        :return: The connected of this Channel.
        :rtype: CallerID
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this Channel.


        :param connected: The connected of this Channel.
        :type connected: CallerID
        """
        if connected is None:
            raise ValueError("Invalid value for `connected`, must not be `None`")

        self._connected = connected

    @property
    def creationtime(self):
        """Gets the creationtime of this Channel.

        Timestamp when channel was created

        :return: The creationtime of this Channel.
        :rtype: date
        """
        return self._creationtime

    @creationtime.setter
    def creationtime(self, creationtime):
        """Sets the creationtime of this Channel.

        Timestamp when channel was created

        :param creationtime: The creationtime of this Channel.
        :type creationtime: date
        """
        if creationtime is None:
            raise ValueError("Invalid value for `creationtime`, must not be `None`")

        self._creationtime = creationtime

    @property
    def dialplan(self):
        """Gets the dialplan of this Channel.


        :return: The dialplan of this Channel.
        :rtype: DialplanCEP
        """
        return self._dialplan

    @dialplan.setter
    def dialplan(self, dialplan):
        """Sets the dialplan of this Channel.


        :param dialplan: The dialplan of this Channel.
        :type dialplan: DialplanCEP
        """
        if dialplan is None:
            raise ValueError("Invalid value for `dialplan`, must not be `None`")

        self._dialplan = dialplan

    @property
    def id(self):
        """Gets the id of this Channel.

        Unique identifier of the channel.  This is the same as the Uniqueid field in AMI.

        :return: The id of this Channel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.

        Unique identifier of the channel.  This is the same as the Uniqueid field in AMI.

        :param id: The id of this Channel.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def language(self):
        """Gets the language of this Channel.

        The default spoken language

        :return: The language of this Channel.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Channel.

        The default spoken language

        :param language: The language of this Channel.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this Channel.

        Name of the channel (i.e. SIP/foo-0000a7e3)

        :return: The name of this Channel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.

        Name of the channel (i.e. SIP/foo-0000a7e3)

        :param name: The name of this Channel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this Channel.


        :return: The state of this Channel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Channel.


        :param state: The state of this Channel.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
