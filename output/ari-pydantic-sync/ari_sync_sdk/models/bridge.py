# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class Bridge(BaseModel):
    """
    The merging of media from one or more channels.  Everyone on the bridge receives the same audio.  # noqa: E501
    """
    bridge_class: StrictStr = Field(default=..., description="Bridging class")
    bridge_type: StrictStr = Field(default=..., description="Type of bridge technology")
    channels: conlist(StrictStr) = Field(default=..., description="Ids of channels participating in this bridge")
    creationtime: date = Field(default=..., description="Timestamp when bridge was created")
    creator: StrictStr = Field(default=..., description="Entity that created the bridge")
    id: StrictStr = Field(default=..., description="Unique identifier for this bridge")
    name: StrictStr = Field(default=..., description="Name the creator gave the bridge")
    technology: StrictStr = Field(default=..., description="Name of the current bridging technology")
    video_mode: Optional[StrictStr] = Field(default=None, description="The video mode the bridge is using. One of 'none', 'talker', or 'single'.")
    video_source_id: Optional[StrictStr] = Field(default=None, description="The ID of the channel that is the source of video in this bridge, if one exists.")
    __properties = ["bridge_class", "bridge_type", "channels", "creationtime", "creator", "id", "name", "technology", "video_mode", "video_source_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Bridge:
        """Create an instance of Bridge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Bridge:
        """Create an instance of Bridge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Bridge.parse_obj(obj)

        _obj = Bridge.parse_obj({
            "bridge_class": obj.get("bridge_class"),
            "bridge_type": obj.get("bridge_type"),
            "channels": obj.get("channels"),
            "creationtime": obj.get("creationtime"),
            "creator": obj.get("creator"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "technology": obj.get("technology"),
            "video_mode": obj.get("video_mode"),
            "video_source_id": obj.get("video_source_id")
        })
        return _obj


