# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ContactInfo(BaseModel):
    """
    Detailed information about a contact on an endpoint.  # noqa: E501
    """
    aor: StrictStr = Field(default=..., description="The Address of Record this contact belongs to.")
    contact_status: StrictStr = Field(default=..., description="The current status of the contact.")
    roundtrip_usec: Optional[StrictStr] = Field(default=None, description="Current round trip time, in microseconds, for the contact.")
    uri: StrictStr = Field(default=..., description="The location of the contact.")
    __properties = ["aor", "contact_status", "roundtrip_usec", "uri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContactInfo:
        """Create an instance of ContactInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContactInfo:
        """Create an instance of ContactInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContactInfo.parse_obj(obj)

        _obj = ContactInfo.parse_obj({
            "aor": obj.get("aor"),
            "contact_status": obj.get("contact_status"),
            "roundtrip_usec": obj.get("roundtrip_usec"),
            "uri": obj.get("uri")
        })
        return _obj


