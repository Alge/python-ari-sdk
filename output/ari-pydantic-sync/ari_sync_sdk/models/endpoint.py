# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class Endpoint(BaseModel):
    """
    An external device that may offer/accept calls to/from Asterisk.  Unlike most resources, which have a single unique identifier, an endpoint is uniquely identified by the technology/resource pair.  # noqa: E501
    """
    channel_ids: conlist(StrictStr) = Field(default=..., description="Id's of channels associated with this endpoint")
    resource: StrictStr = Field(default=..., description="Identifier of the endpoint, specific to the given technology.")
    state: Optional[StrictStr] = Field(default=None, description="Endpoint's state")
    technology: StrictStr = Field(default=..., description="Technology of the endpoint")
    __properties = ["channel_ids", "resource", "state", "technology"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Endpoint:
        """Create an instance of Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Endpoint:
        """Create an instance of Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Endpoint.parse_obj(obj)

        _obj = Endpoint.parse_obj({
            "channel_ids": obj.get("channel_ids"),
            "resource": obj.get("resource"),
            "state": obj.get("state"),
            "technology": obj.get("technology")
        })
        return _obj


