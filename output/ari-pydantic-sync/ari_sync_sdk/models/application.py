# coding: utf-8

"""
    Asterisk ARI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic import BaseModel, Field, StrictStr, conlist

class Application(BaseModel):
    """
    Details of a Stasis application  # noqa: E501
    """
    bridge_ids: conlist(StrictStr) = Field(default=..., description="Id's for bridges subscribed to.")
    channel_ids: conlist(StrictStr) = Field(default=..., description="Id's for channels subscribed to.")
    device_names: conlist(StrictStr) = Field(default=..., description="Names of the devices subscribed to.")
    endpoint_ids: conlist(StrictStr) = Field(default=..., description="{tech}/{resource} for endpoints subscribed to.")
    events_allowed: conlist(Dict[str, Any]) = Field(default=..., description="Event types sent to the application.")
    events_disallowed: conlist(Dict[str, Any]) = Field(default=..., description="Event types not sent to the application.")
    name: StrictStr = Field(default=..., description="Name of this application")
    __properties = ["bridge_ids", "channel_ids", "device_names", "endpoint_ids", "events_allowed", "events_disallowed", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Application:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Application:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Application.parse_obj(obj)

        _obj = Application.parse_obj({
            "bridge_ids": obj.get("bridge_ids"),
            "channel_ids": obj.get("channel_ids"),
            "device_names": obj.get("device_names"),
            "endpoint_ids": obj.get("endpoint_ids"),
            "events_allowed": obj.get("events_allowed"),
            "events_disallowed": obj.get("events_disallowed"),
            "name": obj.get("name")
        })
        return _obj


